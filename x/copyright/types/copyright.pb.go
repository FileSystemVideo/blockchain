// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: copyright.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package


type CopyrightParty struct {
	//ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	
	Intro string `protobuf:"bytes,2,opt,name=intro,proto3" json:"intro,omitempty"`
	
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	
	Creator              string   `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyrightParty) Reset()         { *m = CopyrightParty{} }
func (m *CopyrightParty) String() string { return proto.CompactTextString(m) }
func (*CopyrightParty) ProtoMessage()    {}
func (*CopyrightParty) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{0}
}
func (m *CopyrightParty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightParty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightParty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightParty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightParty.Merge(m, src)
}
func (m *CopyrightParty) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightParty) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightParty.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightParty proto.InternalMessageInfo

func (m *CopyrightParty) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CopyrightParty) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *CopyrightParty) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *CopyrightParty) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}


type GenesisCopyrightPart struct {
	//key
	CopyrightPartyKey string `protobuf:"bytes,1,opt,name=copyright_party_key,json=copyrightPartyKey,proto3" json:"copyright_party_key,omitempty"`
	
	CopyrightParty       CopyrightParty `protobuf:"bytes,2,opt,name=copyright_party,json=copyrightParty,proto3" json:"copyright_party"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GenesisCopyrightPart) Reset()         { *m = GenesisCopyrightPart{} }
func (m *GenesisCopyrightPart) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyrightPart) ProtoMessage()    {}
func (*GenesisCopyrightPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{1}
}
func (m *GenesisCopyrightPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyrightPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyrightPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyrightPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyrightPart.Merge(m, src)
}
func (m *GenesisCopyrightPart) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyrightPart) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyrightPart.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyrightPart proto.InternalMessageInfo

func (m *GenesisCopyrightPart) GetCopyrightPartyKey() string {
	if m != nil {
		return m.CopyrightPartyKey
	}
	return ""
}

func (m *GenesisCopyrightPart) GetCopyrightParty() CopyrightParty {
	if m != nil {
		return m.CopyrightParty
	}
	return CopyrightParty{}
}

//id
type CopyrightPublishId struct {
	//ID
	PublishId            map[string]string `protobuf:"bytes,1,rep,name=publish_id,json=publishId,proto3" json:"publish_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CopyrightPublishId) Reset()         { *m = CopyrightPublishId{} }
func (m *CopyrightPublishId) String() string { return proto.CompactTextString(m) }
func (*CopyrightPublishId) ProtoMessage()    {}
func (*CopyrightPublishId) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{2}
}
func (m *CopyrightPublishId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightPublishId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightPublishId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightPublishId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightPublishId.Merge(m, src)
}
func (m *CopyrightPublishId) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightPublishId) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightPublishId.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightPublishId proto.InternalMessageInfo

func (m *CopyrightPublishId) GetPublishId() map[string]string {
	if m != nil {
		return m.PublishId
	}
	return nil
}

//IP
type CopyrightIp struct {
	
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	//IP
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyrightIp) Reset()         { *m = CopyrightIp{} }
func (m *CopyrightIp) String() string { return proto.CompactTextString(m) }
func (*CopyrightIp) ProtoMessage()    {}
func (*CopyrightIp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{3}
}
func (m *CopyrightIp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightIp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightIp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightIp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightIp.Merge(m, src)
}
func (m *CopyrightIp) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightIp) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightIp.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightIp proto.InternalMessageInfo

func (m *CopyrightIp) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CopyrightIp) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

//IP
type GenesisCopyrightIp struct {
	//IPkey
	CopyrightIpKey string `protobuf:"bytes,1,opt,name=copyright_ip_key,json=copyrightIpKey,proto3" json:"copyright_ip_key,omitempty"`
	//IP
	CopyrightIp          CopyrightIp `protobuf:"bytes,2,opt,name=copyright_ip,json=copyrightIp,proto3" json:"copyright_ip"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GenesisCopyrightIp) Reset()         { *m = GenesisCopyrightIp{} }
func (m *GenesisCopyrightIp) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyrightIp) ProtoMessage()    {}
func (*GenesisCopyrightIp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{4}
}
func (m *GenesisCopyrightIp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyrightIp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyrightIp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyrightIp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyrightIp.Merge(m, src)
}
func (m *GenesisCopyrightIp) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyrightIp) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyrightIp.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyrightIp proto.InternalMessageInfo

func (m *GenesisCopyrightIp) GetCopyrightIpKey() string {
	if m != nil {
		return m.CopyrightIpKey
	}
	return ""
}

func (m *GenesisCopyrightIp) GetCopyrightIp() CopyrightIp {
	if m != nil {
		return m.CopyrightIp
	}
	return CopyrightIp{}
}


type CopyrightOriginDataHash struct {
	
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	
	OriginDataHash string `protobuf:"bytes,2,opt,name=origin_data_hash,json=originDataHash,proto3" json:"origin_data_hash,omitempty"`
	// 0  1  2(,)
	Status               int64    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyrightOriginDataHash) Reset()         { *m = CopyrightOriginDataHash{} }
func (m *CopyrightOriginDataHash) String() string { return proto.CompactTextString(m) }
func (*CopyrightOriginDataHash) ProtoMessage()    {}
func (*CopyrightOriginDataHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{5}
}
func (m *CopyrightOriginDataHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightOriginDataHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightOriginDataHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightOriginDataHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightOriginDataHash.Merge(m, src)
}
func (m *CopyrightOriginDataHash) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightOriginDataHash) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightOriginDataHash.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightOriginDataHash proto.InternalMessageInfo

func (m *CopyrightOriginDataHash) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CopyrightOriginDataHash) GetOriginDataHash() string {
	if m != nil {
		return m.OriginDataHash
	}
	return ""
}

func (m *CopyrightOriginDataHash) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}


type GenesisCopyrightOriginDataHash struct {
	//key
	CopyrightOriginHashKey string `protobuf:"bytes,1,opt,name=copyright_origin_hash_key,json=copyrightOriginHashKey,proto3" json:"copyright_origin_hash_key,omitempty"`
	
	OriginDataHash       CopyrightOriginDataHash `protobuf:"bytes,2,opt,name=origin_data_hash,json=originDataHash,proto3" json:"origin_data_hash"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GenesisCopyrightOriginDataHash) Reset()         { *m = GenesisCopyrightOriginDataHash{} }
func (m *GenesisCopyrightOriginDataHash) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyrightOriginDataHash) ProtoMessage()    {}
func (*GenesisCopyrightOriginDataHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{6}
}
func (m *GenesisCopyrightOriginDataHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyrightOriginDataHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyrightOriginDataHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyrightOriginDataHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyrightOriginDataHash.Merge(m, src)
}
func (m *GenesisCopyrightOriginDataHash) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyrightOriginDataHash) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyrightOriginDataHash.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyrightOriginDataHash proto.InternalMessageInfo

func (m *GenesisCopyrightOriginDataHash) GetCopyrightOriginHashKey() string {
	if m != nil {
		return m.CopyrightOriginHashKey
	}
	return ""
}

func (m *GenesisCopyrightOriginDataHash) GetOriginDataHash() CopyrightOriginDataHash {
	if m != nil {
		return m.OriginDataHash
	}
	return CopyrightOriginDataHash{}
}


type CopyrightBonus struct {
	
	Downer string `protobuf:"bytes,1,opt,name=downer,proto3" json:"downer,omitempty"`
	
	Height               int64    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyrightBonus) Reset()         { *m = CopyrightBonus{} }
func (m *CopyrightBonus) String() string { return proto.CompactTextString(m) }
func (*CopyrightBonus) ProtoMessage()    {}
func (*CopyrightBonus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{7}
}
func (m *CopyrightBonus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightBonus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightBonus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightBonus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightBonus.Merge(m, src)
}
func (m *CopyrightBonus) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightBonus) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightBonus.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightBonus proto.InternalMessageInfo

func (m *CopyrightBonus) GetDowner() string {
	if m != nil {
		return m.Downer
	}
	return ""
}

func (m *CopyrightBonus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}


type GenesisCopyrightBonus struct {
	//key
	CopyrightBonusAddressKey string `protobuf:"bytes,1,opt,name=copyright_bonus_address_key,json=copyrightBonusAddressKey,proto3" json:"copyright_bonus_address_key,omitempty"`
	
	CopyrightBonus       CopyrightBonus `protobuf:"bytes,2,opt,name=copyright_bonus,json=copyrightBonus,proto3" json:"copyright_bonus"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GenesisCopyrightBonus) Reset()         { *m = GenesisCopyrightBonus{} }
func (m *GenesisCopyrightBonus) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyrightBonus) ProtoMessage()    {}
func (*GenesisCopyrightBonus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{8}
}
func (m *GenesisCopyrightBonus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyrightBonus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyrightBonus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyrightBonus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyrightBonus.Merge(m, src)
}
func (m *GenesisCopyrightBonus) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyrightBonus) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyrightBonus.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyrightBonus proto.InternalMessageInfo

func (m *GenesisCopyrightBonus) GetCopyrightBonusAddressKey() string {
	if m != nil {
		return m.CopyrightBonusAddressKey
	}
	return ""
}

func (m *GenesisCopyrightBonus) GetCopyrightBonus() CopyrightBonus {
	if m != nil {
		return m.CopyrightBonus
	}
	return CopyrightBonus{}
}

//NFT
type NftInfoData struct {
	//nft ID
	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	
	EnglishName string `protobuf:"bytes,2,opt,name=english_name,json=englishName,proto3" json:"english_name,omitempty"`
	
	ChineseName string `protobuf:"bytes,3,opt,name=chinese_name,json=chineseName,proto3" json:"chinese_name,omitempty"`
	
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	
	MetaData             string   `protobuf:"bytes,5,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NftInfoData) Reset()         { *m = NftInfoData{} }
func (m *NftInfoData) String() string { return proto.CompactTextString(m) }
func (*NftInfoData) ProtoMessage()    {}
func (*NftInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{9}
}
func (m *NftInfoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftInfoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftInfoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftInfoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftInfoData.Merge(m, src)
}
func (m *NftInfoData) XXX_Size() int {
	return m.Size()
}
func (m *NftInfoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NftInfoData.DiscardUnknown(m)
}

var xxx_messageInfo_NftInfoData proto.InternalMessageInfo

func (m *NftInfoData) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *NftInfoData) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *NftInfoData) GetChineseName() string {
	if m != nil {
		return m.ChineseName
	}
	return ""
}

func (m *NftInfoData) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NftInfoData) GetMetaData() string {
	if m != nil {
		return m.MetaData
	}
	return ""
}

//NFT
type GenesisNftInfo struct {
	//NFT key
	NftTokenIdKey string `protobuf:"bytes,1,opt,name=nft_token_id_key,json=nftTokenIdKey,proto3" json:"nft_token_id_key,omitempty"`
	//NFT
	NftInfo              NftInfoData `protobuf:"bytes,2,opt,name=nft_info,json=nftInfo,proto3" json:"nft_info"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GenesisNftInfo) Reset()         { *m = GenesisNftInfo{} }
func (m *GenesisNftInfo) String() string { return proto.CompactTextString(m) }
func (*GenesisNftInfo) ProtoMessage()    {}
func (*GenesisNftInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{10}
}
func (m *GenesisNftInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisNftInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisNftInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisNftInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisNftInfo.Merge(m, src)
}
func (m *GenesisNftInfo) XXX_Size() int {
	return m.Size()
}
func (m *GenesisNftInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisNftInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisNftInfo proto.InternalMessageInfo

func (m *GenesisNftInfo) GetNftTokenIdKey() string {
	if m != nil {
		return m.NftTokenIdKey
	}
	return ""
}

func (m *GenesisNftInfo) GetNftInfo() NftInfoData {
	if m != nil {
		return m.NftInfo
	}
	return NftInfoData{}
}


type CopyrightVoteShare struct {
	
	FavorTotal string `protobuf:"bytes,1,opt,name=favor_total,json=favorTotal,proto3" json:"favor_total,omitempty"`
	
	AgainstTotal         string   `protobuf:"bytes,2,opt,name=against_total,json=againstTotal,proto3" json:"against_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyrightVoteShare) Reset()         { *m = CopyrightVoteShare{} }
func (m *CopyrightVoteShare) String() string { return proto.CompactTextString(m) }
func (*CopyrightVoteShare) ProtoMessage()    {}
func (*CopyrightVoteShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{11}
}
func (m *CopyrightVoteShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightVoteShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightVoteShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightVoteShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightVoteShare.Merge(m, src)
}
func (m *CopyrightVoteShare) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightVoteShare) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightVoteShare.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightVoteShare proto.InternalMessageInfo

func (m *CopyrightVoteShare) GetFavorTotal() string {
	if m != nil {
		return m.FavorTotal
	}
	return ""
}

func (m *CopyrightVoteShare) GetAgainstTotal() string {
	if m != nil {
		return m.AgainstTotal
	}
	return ""
}


type GenesisCopyrightVote struct {
	//key
	CopyrightVoteKey string `protobuf:"bytes,1,opt,name=copyright_vote_key,json=copyrightVoteKey,proto3" json:"copyright_vote_key,omitempty"`
	
	VoteData             map[string]CopyrightVoteShare `protobuf:"bytes,2,rep,name=vote_data,json=voteData,proto3" json:"vote_data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GenesisCopyrightVote) Reset()         { *m = GenesisCopyrightVote{} }
func (m *GenesisCopyrightVote) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyrightVote) ProtoMessage()    {}
func (*GenesisCopyrightVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{12}
}
func (m *GenesisCopyrightVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyrightVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyrightVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyrightVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyrightVote.Merge(m, src)
}
func (m *GenesisCopyrightVote) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyrightVote) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyrightVote.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyrightVote proto.InternalMessageInfo

func (m *GenesisCopyrightVote) GetCopyrightVoteKey() string {
	if m != nil {
		return m.CopyrightVoteKey
	}
	return ""
}

func (m *GenesisCopyrightVote) GetVoteData() map[string]CopyrightVoteShare {
	if m != nil {
		return m.VoteData
	}
	return nil
}


type AccountVote struct {
	
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	//TX
	Txhash string `protobuf:"bytes,2,opt,name=txhash,proto3" json:"txhash,omitempty"`
	
	Power string `protobuf:"bytes,3,opt,name=power,proto3" json:"power,omitempty"`
	
	MortgTime string `protobuf:"bytes,4,opt,name=mortg_time,json=mortgTime,proto3" json:"mortg_time,omitempty"`
	
	Status               int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountVote) Reset()         { *m = AccountVote{} }
func (m *AccountVote) String() string { return proto.CompactTextString(m) }
func (*AccountVote) ProtoMessage()    {}
func (*AccountVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{13}
}
func (m *AccountVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountVote.Merge(m, src)
}
func (m *AccountVote) XXX_Size() int {
	return m.Size()
}
func (m *AccountVote) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountVote.DiscardUnknown(m)
}

var xxx_messageInfo_AccountVote proto.InternalMessageInfo

func (m *AccountVote) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AccountVote) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *AccountVote) GetPower() string {
	if m != nil {
		return m.Power
	}
	return ""
}

func (m *AccountVote) GetMortgTime() string {
	if m != nil {
		return m.MortgTime
	}
	return ""
}

func (m *AccountVote) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}


type GenesisCopyrightVoteList struct {
	//key
	CopyrightVoteListKey string `protobuf:"bytes,1,opt,name=copyright_vote_list_key,json=copyrightVoteListKey,proto3" json:"copyright_vote_list_key,omitempty"`
	
	AccountVote          []AccountVote `protobuf:"bytes,2,rep,name=account_vote,json=accountVote,proto3" json:"account_vote"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GenesisCopyrightVoteList) Reset()         { *m = GenesisCopyrightVoteList{} }
func (m *GenesisCopyrightVoteList) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyrightVoteList) ProtoMessage()    {}
func (*GenesisCopyrightVoteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{14}
}
func (m *GenesisCopyrightVoteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyrightVoteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyrightVoteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyrightVoteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyrightVoteList.Merge(m, src)
}
func (m *GenesisCopyrightVoteList) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyrightVoteList) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyrightVoteList.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyrightVoteList proto.InternalMessageInfo

func (m *GenesisCopyrightVoteList) GetCopyrightVoteListKey() string {
	if m != nil {
		return m.CopyrightVoteListKey
	}
	return ""
}

func (m *GenesisCopyrightVoteList) GetAccountVote() []AccountVote {
	if m != nil {
		return m.AccountVote
	}
	return nil
}


type CopyrightApproveResultData struct {
	
	DataHash string `protobuf:"bytes,1,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	
	CreateTime           string   `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyrightApproveResultData) Reset()         { *m = CopyrightApproveResultData{} }
func (m *CopyrightApproveResultData) String() string { return proto.CompactTextString(m) }
func (*CopyrightApproveResultData) ProtoMessage()    {}
func (*CopyrightApproveResultData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{15}
}
func (m *CopyrightApproveResultData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightApproveResultData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightApproveResultData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightApproveResultData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightApproveResultData.Merge(m, src)
}
func (m *CopyrightApproveResultData) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightApproveResultData) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightApproveResultData.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightApproveResultData proto.InternalMessageInfo

func (m *CopyrightApproveResultData) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *CopyrightApproveResultData) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}


type GenesisCopyright struct {
	//key
	CopyrightKey         string    `protobuf:"bytes,1,opt,name=copyright_key,json=copyrightKey,proto3" json:"copyright_key,omitempty"`
	Copyright            Copyright `protobuf:"bytes,2,opt,name=copyright,proto3" json:"copyright"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GenesisCopyright) Reset()         { *m = GenesisCopyright{} }
func (m *GenesisCopyright) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyright) ProtoMessage()    {}
func (*GenesisCopyright) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{16}
}
func (m *GenesisCopyright) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyright) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyright.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyright) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyright.Merge(m, src)
}
func (m *GenesisCopyright) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyright) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyright.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyright proto.InternalMessageInfo

func (m *GenesisCopyright) GetCopyrightKey() string {
	if m != nil {
		return m.CopyrightKey
	}
	return ""
}

func (m *GenesisCopyright) GetCopyright() Copyright {
	if m != nil {
		return m.Copyright
	}
	return Copyright{}
}


type Copyright struct {
	
	DataHash string `protobuf:"bytes,1,opt,name=DataHash,proto3" json:"DataHash,omitempty"`
	
	Price GenesisRealCoin `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
	
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	
	Resourcetype string `protobuf:"bytes,4,opt,name=resourcetype,proto3" json:"resourcetype,omitempty"`
	//ipfs hash
	Prehash string `protobuf:"bytes,5,opt,name=prehash,proto3" json:"prehash,omitempty"`
	//ipfs hash
	VideoHash string `protobuf:"bytes,6,opt,name=video_hash,json=videoHash,proto3" json:"video_hash,omitempty"`
	
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	
	Files File `protobuf:"bytes,8,opt,name=files,proto3" json:"files"`
	
	Size_ int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	
	CreateTime int64 `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	
	Password string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	
	ChargeRate string `protobuf:"bytes,12,opt,name=charge_rate,json=chargeRate,proto3" json:"charge_rate,omitempty"`
	//IP
	Ip string `protobuf:"bytes,13,opt,name=ip,proto3" json:"ip,omitempty"`
	
	OriginDatahash string `protobuf:"bytes,14,opt,name=origin_datahash,json=originDatahash,proto3" json:"origin_datahash,omitempty"`
	
	Ext string `protobuf:"bytes,15,opt,name=ext,proto3" json:"ext,omitempty"`
	//uid
	ClassifyUid int64 `protobuf:"varint,16,opt,name=classify_uid,json=classifyUid,proto3" json:"classify_uid,omitempty"`
	
	LinkMap map[string]LinkData `protobuf:"bytes,17,rep,name=link_map,json=linkMap,proto3" json:"link_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	
	ApproveStatus int32 `protobuf:"varint,18,opt,name=approve_status,json=approveStatus,proto3" json:"approve_status,omitempty"`
	//hash
	PicLinkMap map[string]LinkData `protobuf:"bytes,19,rep,name=pic_link_map,json=picLinkMap,proto3" json:"pic_link_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	
	SecretMap            map[string]Values `protobuf:"bytes,20,rep,name=secret_map,json=secretMap,proto3" json:"secret_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Copyright) Reset()         { *m = Copyright{} }
func (m *Copyright) String() string { return proto.CompactTextString(m) }
func (*Copyright) ProtoMessage()    {}
func (*Copyright) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{17}
}
func (m *Copyright) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Copyright) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Copyright.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Copyright) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Copyright.Merge(m, src)
}
func (m *Copyright) XXX_Size() int {
	return m.Size()
}
func (m *Copyright) XXX_DiscardUnknown() {
	xxx_messageInfo_Copyright.DiscardUnknown(m)
}

var xxx_messageInfo_Copyright proto.InternalMessageInfo

func (m *Copyright) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *Copyright) GetPrice() GenesisRealCoin {
	if m != nil {
		return m.Price
	}
	return GenesisRealCoin{}
}

func (m *Copyright) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Copyright) GetResourcetype() string {
	if m != nil {
		return m.Resourcetype
	}
	return ""
}

func (m *Copyright) GetPrehash() string {
	if m != nil {
		return m.Prehash
	}
	return ""
}

func (m *Copyright) GetVideoHash() string {
	if m != nil {
		return m.VideoHash
	}
	return ""
}

func (m *Copyright) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Copyright) GetFiles() File {
	if m != nil {
		return m.Files
	}
	return File{}
}

func (m *Copyright) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Copyright) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Copyright) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Copyright) GetChargeRate() string {
	if m != nil {
		return m.ChargeRate
	}
	return ""
}

func (m *Copyright) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Copyright) GetOriginDatahash() string {
	if m != nil {
		return m.OriginDatahash
	}
	return ""
}

func (m *Copyright) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *Copyright) GetClassifyUid() int64 {
	if m != nil {
		return m.ClassifyUid
	}
	return 0
}

func (m *Copyright) GetLinkMap() map[string]LinkData {
	if m != nil {
		return m.LinkMap
	}
	return nil
}

func (m *Copyright) GetApproveStatus() int32 {
	if m != nil {
		return m.ApproveStatus
	}
	return 0
}

func (m *Copyright) GetPicLinkMap() map[string]LinkData {
	if m != nil {
		return m.PicLinkMap
	}
	return nil
}

func (m *Copyright) GetSecretMap() map[string]Values {
	if m != nil {
		return m.SecretMap
	}
	return nil
}


type Values struct {
	Val                  [][]byte `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Values) Reset()         { *m = Values{} }
func (m *Values) String() string { return proto.CompactTextString(m) }
func (*Values) ProtoMessage()    {}
func (*Values) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{18}
}
func (m *Values) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Values) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Values.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Values) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Values.Merge(m, src)
}
func (m *Values) XXX_Size() int {
	return m.Size()
}
func (m *Values) XXX_DiscardUnknown() {
	xxx_messageInfo_Values.DiscardUnknown(m)
}

var xxx_messageInfo_Values proto.InternalMessageInfo

func (m *Values) GetVal() [][]byte {
	if m != nil {
		return m.Val
	}
	return nil
}


type LinkData struct {
	
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	
	Size_ uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	
	Cid                  string   `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkData) Reset()         { *m = LinkData{} }
func (m *LinkData) String() string { return proto.CompactTextString(m) }
func (*LinkData) ProtoMessage()    {}
func (*LinkData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{19}
}
func (m *LinkData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkData.Merge(m, src)
}
func (m *LinkData) XXX_Size() int {
	return m.Size()
}
func (m *LinkData) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkData.DiscardUnknown(m)
}

var xxx_messageInfo_LinkData proto.InternalMessageInfo

func (m *LinkData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LinkData) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *LinkData) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}


type File struct {
	IsDir                bool     `protobuf:"varint,1,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	Size_                int64    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Content              []File   `protobuf:"bytes,4,rep,name=content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{20}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return m.Size()
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *File) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetContent() []File {
	if m != nil {
		return m.Content
	}
	return nil
}


type CopyrightExtra struct {
	
	Downer string `protobuf:"bytes,1,opt,name=downer,proto3" json:"downer,omitempty"`
	
	Price GenesisRealCoin `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
	//  buy  mortgage ()
	Species string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	
	Height               int64    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CopyrightExtra) Reset()         { *m = CopyrightExtra{} }
func (m *CopyrightExtra) String() string { return proto.CompactTextString(m) }
func (*CopyrightExtra) ProtoMessage()    {}
func (*CopyrightExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{21}
}
func (m *CopyrightExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CopyrightExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CopyrightExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CopyrightExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CopyrightExtra.Merge(m, src)
}
func (m *CopyrightExtra) XXX_Size() int {
	return m.Size()
}
func (m *CopyrightExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_CopyrightExtra.DiscardUnknown(m)
}

var xxx_messageInfo_CopyrightExtra proto.InternalMessageInfo

func (m *CopyrightExtra) GetDowner() string {
	if m != nil {
		return m.Downer
	}
	return ""
}

func (m *CopyrightExtra) GetPrice() GenesisRealCoin {
	if m != nil {
		return m.Price
	}
	return GenesisRealCoin{}
}

func (m *CopyrightExtra) GetSpecies() string {
	if m != nil {
		return m.Species
	}
	return ""
}

func (m *CopyrightExtra) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}


type GenesisCopyrightExtra struct {
	//key
	CopyrightExtraKey string `protobuf:"bytes,1,opt,name=copyright_extra_key,json=copyrightExtraKey,proto3" json:"copyright_extra_key,omitempty"`
	
	CopyrightExtra       CopyrightExtra `protobuf:"bytes,2,opt,name=copyright_extra,json=copyrightExtra,proto3" json:"copyright_extra"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GenesisCopyrightExtra) Reset()         { *m = GenesisCopyrightExtra{} }
func (m *GenesisCopyrightExtra) String() string { return proto.CompactTextString(m) }
func (*GenesisCopyrightExtra) ProtoMessage()    {}
func (*GenesisCopyrightExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_c19fdffb46235084, []int{22}
}
func (m *GenesisCopyrightExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisCopyrightExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisCopyrightExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisCopyrightExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisCopyrightExtra.Merge(m, src)
}
func (m *GenesisCopyrightExtra) XXX_Size() int {
	return m.Size()
}
func (m *GenesisCopyrightExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisCopyrightExtra.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisCopyrightExtra proto.InternalMessageInfo

func (m *GenesisCopyrightExtra) GetCopyrightExtraKey() string {
	if m != nil {
		return m.CopyrightExtraKey
	}
	return ""
}

func (m *GenesisCopyrightExtra) GetCopyrightExtra() CopyrightExtra {
	if m != nil {
		return m.CopyrightExtra
	}
	return CopyrightExtra{}
}

func init() {
	proto.RegisterType((*CopyrightParty)(nil), "copyright.v1beta1.CopyrightParty")
	proto.RegisterType((*GenesisCopyrightPart)(nil), "copyright.v1beta1.GenesisCopyrightPart")
	proto.RegisterType((*CopyrightPublishId)(nil), "copyright.v1beta1.CopyrightPublishId")
	proto.RegisterMapType((map[string]string)(nil), "copyright.v1beta1.CopyrightPublishId.PublishIdEntry")
	proto.RegisterType((*CopyrightIp)(nil), "copyright.v1beta1.CopyrightIp")
	proto.RegisterType((*GenesisCopyrightIp)(nil), "copyright.v1beta1.GenesisCopyrightIp")
	proto.RegisterType((*CopyrightOriginDataHash)(nil), "copyright.v1beta1.CopyrightOriginDataHash")
	proto.RegisterType((*GenesisCopyrightOriginDataHash)(nil), "copyright.v1beta1.GenesisCopyrightOriginDataHash")
	proto.RegisterType((*CopyrightBonus)(nil), "copyright.v1beta1.CopyrightBonus")
	proto.RegisterType((*GenesisCopyrightBonus)(nil), "copyright.v1beta1.GenesisCopyrightBonus")
	proto.RegisterType((*NftInfoData)(nil), "copyright.v1beta1.NftInfoData")
	proto.RegisterType((*GenesisNftInfo)(nil), "copyright.v1beta1.GenesisNftInfo")
	proto.RegisterType((*CopyrightVoteShare)(nil), "copyright.v1beta1.CopyrightVoteShare")
	proto.RegisterType((*GenesisCopyrightVote)(nil), "copyright.v1beta1.GenesisCopyrightVote")
	proto.RegisterMapType((map[string]CopyrightVoteShare)(nil), "copyright.v1beta1.GenesisCopyrightVote.VoteDataEntry")
	proto.RegisterType((*AccountVote)(nil), "copyright.v1beta1.AccountVote")
	proto.RegisterType((*GenesisCopyrightVoteList)(nil), "copyright.v1beta1.GenesisCopyrightVoteList")
	proto.RegisterType((*CopyrightApproveResultData)(nil), "copyright.v1beta1.CopyrightApproveResultData")
	proto.RegisterType((*GenesisCopyright)(nil), "copyright.v1beta1.GenesisCopyright")
	proto.RegisterType((*Copyright)(nil), "copyright.v1beta1.Copyright")
	proto.RegisterMapType((map[string]LinkData)(nil), "copyright.v1beta1.Copyright.LinkMapEntry")
	proto.RegisterMapType((map[string]LinkData)(nil), "copyright.v1beta1.Copyright.PicLinkMapEntry")
	proto.RegisterMapType((map[string]Values)(nil), "copyright.v1beta1.Copyright.SecretMapEntry")
	proto.RegisterType((*Values)(nil), "copyright.v1beta1.Values")
	proto.RegisterType((*LinkData)(nil), "copyright.v1beta1.LinkData")
	proto.RegisterType((*File)(nil), "copyright.v1beta1.File")
	proto.RegisterType((*CopyrightExtra)(nil), "copyright.v1beta1.CopyrightExtra")
	proto.RegisterType((*GenesisCopyrightExtra)(nil), "copyright.v1beta1.GenesisCopyrightExtra")
}

func init() { proto.RegisterFile("copyright.proto", fileDescriptor_c19fdffb46235084) }

var fileDescriptor_c19fdffb46235084 = []byte{
	// 1486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4d, 0x73, 0x1b, 0x45,
	0x13, 0x7e, 0xd7, 0xf2, 0x87, 0xd4, 0x92, 0x65, 0x65, 0xe2, 0x24, 0x1b, 0xf9, 0x7d, 0xed, 0x37,
	0x4b, 0xa5, 0x62, 0x20, 0x65, 0x57, 0x1c, 0x52, 0xe1, 0x9b, 0x7c, 0x12, 0x0c, 0x21, 0xb8, 0x64,
	0x93, 0x50, 0xbe, 0x6c, 0x8d, 0x77, 0x47, 0xd2, 0x94, 0xa5, 0xdd, 0xad, 0x9d, 0x91, 0x62, 0xe5,
	0xc0, 0x81, 0x0b, 0x17, 0x7e, 0x00, 0x70, 0xe3, 0x04, 0x47, 0x6e, 0xfc, 0x85, 0x1c, 0xf9, 0x05,
	0x14, 0x95, 0x5f, 0x42, 0x4d, 0xcf, 0x8c, 0x76, 0x57, 0x56, 0x44, 0x0e, 0xb9, 0xa8, 0xb6, 0x7b,
	0x7a, 0xfa, 0xe3, 0x99, 0xee, 0x67, 0x46, 0xb0, 0x12, 0xc4, 0xc9, 0x28, 0xe5, 0x9d, 0xae, 0xdc,
	0x4a, 0xd2, 0x58, 0xc6, 0xe4, 0x4c, 0xa6, 0x18, 0x5e, 0x3b, 0x62, 0x92, 0x5e, 0x6b, 0xae, 0x76,
	0xe2, 0x4e, 0x8c, 0xab, 0xdb, 0xea, 0x4b, 0x1b, 0x36, 0xd7, 0xc6, 0x86, 0xdb, 0x22, 0xa1, 0x01,
	0xf3, 0xfb, 0x3c, 0x62, 0xa9, 0x5e, 0xf4, 0xba, 0x50, 0xbf, 0x6b, 0x97, 0xf7, 0x68, 0x2a, 0x47,
	0xa4, 0x0e, 0x73, 0x3c, 0x74, 0x9d, 0xff, 0x3b, 0x9b, 0x95, 0xd6, 0x1c, 0x0f, 0xc9, 0x2a, 0x2c,
	0xf0, 0x48, 0xa6, 0xb1, 0x3b, 0x87, 0x2a, 0x2d, 0x90, 0xf3, 0xb0, 0x48, 0x07, 0xb2, 0x1b, 0xa7,
	0x6e, 0x09, 0xd5, 0x46, 0x22, 0x2e, 0x2c, 0x05, 0x29, 0xa3, 0x32, 0x4e, 0xdd, 0x79, 0x5c, 0xb0,
	0xa2, 0xf7, 0xa3, 0x03, 0xab, 0x0f, 0x58, 0xc4, 0x04, 0x17, 0x85, 0x88, 0x64, 0x0b, 0xce, 0x8e,
	0x33, 0xf4, 0x13, 0x95, 0x83, 0x7f, 0xcc, 0x46, 0x26, 0x83, 0xac, 0x4a, 0xcc, 0xee, 0x0b, 0x36,
	0x22, 0x7b, 0x39, 0x2c, 0xb4, 0x3d, 0xa6, 0x56, 0xdd, 0xb9, 0xb4, 0x75, 0x0a, 0x92, 0xad, 0x62,
	0x71, 0x77, 0xe6, 0x9f, 0xff, 0xb5, 0xf1, 0x9f, 0x56, 0xbd, 0xe8, 0xd4, 0xfb, 0xd5, 0x01, 0x92,
	0x19, 0x0e, 0x8e, 0x7a, 0x5c, 0x74, 0x77, 0x43, 0xb2, 0x0f, 0x90, 0x68, 0xc1, 0x47, 0x44, 0x4a,
	0x9b, 0xd5, 0x9d, 0x77, 0x66, 0xc6, 0xb0, 0x5b, 0xb7, 0xc6, 0x5f, 0xf7, 0x23, 0x99, 0x8e, 0x5a,
	0x95, 0xc4, 0xca, 0xcd, 0x0f, 0xa1, 0x5e, 0x5c, 0x24, 0x0d, 0x28, 0x65, 0xf5, 0xaa, 0x4f, 0x05,
	0xf9, 0x90, 0xf6, 0x06, 0xcc, 0x42, 0x8e, 0xc2, 0xfb, 0x73, 0xef, 0x3a, 0xde, 0x4d, 0xa8, 0x8e,
	0xa3, 0xed, 0x26, 0x79, 0xb4, 0x9d, 0x02, 0xda, 0x78, 0x8a, 0x89, 0xd9, 0x3f, 0xc7, 0x13, 0xef,
	0x7b, 0x07, 0xc8, 0x24, 0xfa, 0xbb, 0x09, 0xd9, 0x84, 0x46, 0x86, 0x25, 0x4f, 0x72, 0xc0, 0x67,
	0x18, 0xed, 0x26, 0x0a, 0xf5, 0x07, 0x50, 0xcb, 0x5b, 0x1a, 0xc8, 0xd7, 0x67, 0xc1, 0xb1, 0x9b,
	0x18, 0xbc, 0xab, 0x39, 0x5f, 0xde, 0x00, 0x2e, 0x8c, 0x2d, 0xbe, 0x4a, 0x79, 0x87, 0x47, 0xf7,
	0xa8, 0xa4, 0x9f, 0x51, 0xd1, 0x9d, 0x51, 0xce, 0x26, 0x34, 0x62, 0xb4, 0xf5, 0x43, 0x2a, 0xa9,
	0xdf, 0xa5, 0xa2, 0x6b, 0x8a, 0xab, 0xc7, 0x45, 0x1f, 0xe7, 0x61, 0x51, 0x48, 0x2a, 0x07, 0x02,
	0x1b, 0xb3, 0xd4, 0x32, 0x92, 0xf7, 0x87, 0x03, 0xeb, 0x93, 0x00, 0x4c, 0x84, 0x7f, 0x0f, 0x2e,
	0x66, 0x25, 0x9a, 0x70, 0x2a, 0x52, 0x0e, 0x95, 0xf3, 0x41, 0x71, 0xaf, 0xda, 0xa7, 0xd0, 0x39,
	0x7c, 0x49, 0x7e, 0xd5, 0x9d, 0xb7, 0x66, 0x21, 0x54, 0x4c, 0xc0, 0x76, 0x67, 0xb1, 0x22, 0xef,
	0x56, 0x6e, 0x44, 0xef, 0xc4, 0xd1, 0x40, 0xa8, 0x1a, 0xc3, 0xf8, 0x69, 0xc4, 0x2c, 0x4c, 0x46,
	0x52, 0xfa, 0x2e, 0x53, 0x66, 0x18, 0xbb, 0xd4, 0x32, 0x92, 0xf7, 0x9b, 0x03, 0xe7, 0x26, 0x6b,
	0xd7, 0x9e, 0x3e, 0x82, 0x8c, 0x1d, 0xfc, 0x23, 0xa5, 0xf2, 0x69, 0x18, 0xa6, 0x4c, 0x88, 0x5c,
	0xd1, 0x6e, 0x50, 0xd8, 0x74, 0x5b, 0x1b, 0x9c, 0x1a, 0x45, 0xdc, 0xfe, 0x2a, 0xa3, 0x88, 0x5e,
	0x4e, 0x8d, 0x22, 0x6a, 0xbd, 0x5f, 0x1c, 0xa8, 0x3e, 0x6a, 0xcb, 0xdd, 0xa8, 0x1d, 0x2b, 0x00,
	0xc8, 0x45, 0x28, 0xcb, 0xf8, 0x98, 0x45, 0xfe, 0x98, 0x93, 0x96, 0x50, 0xde, 0x0d, 0xc9, 0x25,
	0xa8, 0xb1, 0xa8, 0x83, 0xe3, 0x19, 0xd1, 0xbe, 0x1d, 0x96, 0xaa, 0xd1, 0x3d, 0xa2, 0x7d, 0xa6,
	0x4c, 0x82, 0x2e, 0x8f, 0x98, 0x60, 0xda, 0x44, 0x73, 0x55, 0xd5, 0xe8, 0xd0, 0x64, 0x15, 0x16,
	0x34, 0x94, 0x9a, 0xae, 0xb4, 0x40, 0xd6, 0xa0, 0xd2, 0x67, 0x92, 0xe2, 0x69, 0xba, 0x0b, 0xb8,
	0x52, 0x56, 0x0a, 0x95, 0x93, 0xf7, 0x0c, 0xea, 0x06, 0x4d, 0x93, 0x29, 0xb9, 0x02, 0x8d, 0xa8,
	0x2d, 0x7d, 0x9b, 0x69, 0x0e, 0xbb, 0xe5, 0xa8, 0x2d, 0x0f, 0x74, 0xc2, 0x0a, 0xb0, 0x4f, 0xa0,
	0xac, 0x0c, 0x79, 0xd4, 0x8e, 0x67, 0x4c, 0x50, 0x0e, 0x00, 0x03, 0xd3, 0x52, 0xa4, 0x55, 0xde,
	0x61, 0x8e, 0xa9, 0x1e, 0xc7, 0x92, 0xed, 0x77, 0x69, 0xca, 0xc8, 0x06, 0x54, 0xdb, 0x74, 0x18,
	0xa7, 0xbe, 0x8c, 0x25, 0xed, 0x99, 0xd0, 0x80, 0xaa, 0x03, 0xa5, 0x21, 0x6f, 0xc0, 0x32, 0xed,
	0x50, 0x1e, 0x09, 0x69, 0x4c, 0x34, 0x58, 0x35, 0xa3, 0x44, 0x23, 0xef, 0xbb, 0xb9, 0xd3, 0x0c,
	0xad, 0x62, 0x90, 0xab, 0x40, 0xb2, 0x63, 0x1e, 0xc6, 0x92, 0xe5, 0x0a, 0xcc, 0xf8, 0x43, 0x99,
	0xaa, 0x1a, 0xbf, 0x81, 0x0a, 0xda, 0x20, 0x76, 0x73, 0xc8, 0x9a, 0x37, 0xa6, 0x14, 0x39, 0x2d,
	0xd2, 0x96, 0xfa, 0x51, 0x65, 0x23, 0x33, 0x9a, 0xda, 0xcb, 0x43, 0xa3, 0x6c, 0x1e, 0xc1, 0x72,
	0xc1, 0x60, 0x0a, 0x75, 0x7e, 0x90, 0xa7, 0xce, 0xea, 0xce, 0xe5, 0x59, 0x7d, 0x38, 0xc6, 0x2f,
	0xcf, 0xb0, 0x3f, 0x38, 0x50, 0xbd, 0x1d, 0x04, 0xf1, 0x20, 0xd2, 0xb5, 0xbb, 0xb0, 0x44, 0xb5,
	0x68, 0xfb, 0xcf, 0x88, 0x6a, 0xda, 0xe4, 0x49, 0x8e, 0x89, 0x8c, 0xa4, 0x3a, 0x2a, 0x89, 0x9f,
	0x32, 0x7b, 0x33, 0x6a, 0x81, 0xfc, 0x0f, 0xa0, 0x1f, 0xa7, 0xb2, 0xe3, 0x4b, 0xde, 0x67, 0xa6,
	0xd9, 0x2a, 0xa8, 0x39, 0xe0, 0x7d, 0x96, 0xa3, 0x2d, 0xd5, 0x6d, 0x0b, 0x63, 0xda, 0xfa, 0xd9,
	0x01, 0x77, 0x1a, 0x52, 0x0f, 0xb9, 0x90, 0xe4, 0x06, 0x5c, 0x98, 0x38, 0x97, 0x1e, 0x17, 0x32,
	0x77, 0x38, 0xab, 0xc1, 0xe4, 0x1e, 0x43, 0xe5, 0xa6, 0x06, 0xdc, 0x64, 0xce, 0x68, 0x5a, 0x23,
	0xe6, 0x80, 0xb0, 0x54, 0x4e, 0x33, 0x95, 0x77, 0x08, 0xcd, 0x71, 0x52, 0xb7, 0x93, 0x24, 0x8d,
	0x87, 0xac, 0xc5, 0xc4, 0xa0, 0x27, 0x71, 0x74, 0xd7, 0xa0, 0x92, 0x91, 0xa1, 0xce, 0xa7, 0x1c,
	0x5a, 0xae, 0xdd, 0x80, 0x2a, 0x72, 0x3b, 0xd3, 0x78, 0x68, 0x04, 0x41, 0xab, 0x14, 0x20, 0xde,
	0x08, 0x1a, 0x93, 0x75, 0xab, 0x2e, 0xce, 0xea, 0xcd, 0xaa, 0xcc, 0x2e, 0x26, 0x55, 0xdd, 0x2d,
	0xa8, 0x8c, 0x65, 0xd3, 0x05, 0xff, 0x9d, 0xc9, 0x46, 0xba, 0xb0, 0x6c, 0x93, 0xf7, 0x7b, 0x19,
	0x2a, 0x59, 0xd0, 0x26, 0x94, 0x2d, 0x15, 0xdb, 0x2a, 0xc6, 0x37, 0xc6, 0xc7, 0xb0, 0x90, 0xa4,
	0x3c, 0xb0, 0xdd, 0xe6, 0xbd, 0xbc, 0xcd, 0x5b, 0x8c, 0xf6, 0xee, 0xc6, 0x3c, 0x32, 0xd1, 0xf4,
	0xb6, 0xfc, 0x85, 0x57, 0x2a, 0x5e, 0x78, 0x1e, 0xd4, 0x52, 0x26, 0xe2, 0x41, 0x1a, 0x30, 0x39,
	0x4a, 0x6c, 0xc3, 0x14, 0x74, 0x6a, 0x77, 0x92, 0x32, 0x84, 0x57, 0x53, 0x94, 0x15, 0x55, 0xb3,
	0x0d, 0x79, 0xc8, 0x62, 0x8d, 0xfd, 0xa2, 0x6e, 0x36, 0xd4, 0x60, 0xda, 0x04, 0xe6, 0x91, 0x0e,
	0x97, 0x70, 0x01, 0xbf, 0xc9, 0x75, 0x58, 0x68, 0xf3, 0x1e, 0x13, 0x6e, 0x19, 0x4b, 0xb9, 0x30,
	0xa5, 0x94, 0x4f, 0x79, 0xcf, 0xb6, 0x81, 0xb6, 0x55, 0x8e, 0x04, 0x7f, 0xc6, 0xdc, 0x0a, 0x5e,
	0x37, 0xf8, 0x3d, 0x79, 0xb2, 0x80, 0x4b, 0xb9, 0x93, 0x55, 0x80, 0x26, 0x54, 0x88, 0xa7, 0x71,
	0x1a, 0xba, 0x55, 0x0d, 0xa8, 0x95, 0x71, 0x73, 0x97, 0xa6, 0x1d, 0xe6, 0xa7, 0x54, 0x32, 0xb7,
	0x66, 0xda, 0x02, 0x55, 0x2d, 0x2a, 0x99, 0x79, 0xd7, 0x2c, 0xdb, 0x77, 0x0d, 0xb9, 0x02, 0x2b,
	0xb9, 0x8b, 0x17, 0xcb, 0xad, 0x4f, 0xbe, 0x0b, 0x10, 0x92, 0x06, 0x94, 0xd8, 0x89, 0x74, 0x57,
	0x34, 0x55, 0xb0, 0x13, 0x89, 0x97, 0x43, 0x8f, 0x0a, 0xc1, 0xdb, 0x23, 0x7f, 0xc0, 0x43, 0xb7,
	0x81, 0x99, 0x56, 0xad, 0xee, 0x6b, 0x1e, 0x92, 0xcf, 0xa1, 0xdc, 0xe3, 0xd1, 0xb1, 0xdf, 0xa7,
	0x89, 0x7b, 0x06, 0xa7, 0xe4, 0xcd, 0x59, 0xad, 0xb4, 0xf5, 0x90, 0x47, 0xc7, 0x5f, 0xd2, 0x24,
	0xcf, 0x5e, 0x4b, 0x3d, 0xad, 0x23, 0x97, 0xa1, 0x4e, 0xf5, 0x8c, 0xf8, 0x66, 0xd2, 0x09, 0x4e,
	0xfa, 0xb2, 0xd1, 0xee, 0xa3, 0x92, 0x1c, 0x40, 0x2d, 0xe1, 0x81, 0x3f, 0x0e, 0x7b, 0x16, 0xc3,
	0x5e, 0x9d, 0x19, 0x76, 0x8f, 0x07, 0x53, 0x22, 0x43, 0x32, 0x56, 0x93, 0x3d, 0x00, 0xc1, 0x82,
	0x94, 0x49, 0xf4, 0xb9, 0x8a, 0x3e, 0xdf, 0x9e, 0xe9, 0x73, 0x1f, 0xcd, 0x27, 0x5c, 0x56, 0x84,
	0xd5, 0x36, 0x9f, 0x40, 0x2d, 0x1f, 0x73, 0x0a, 0x15, 0x5f, 0x2b, 0x52, 0xf1, 0xda, 0x94, 0x70,
	0xca, 0x83, 0x3a, 0xa1, 0x1c, 0x01, 0x37, 0x0f, 0x61, 0x65, 0xa2, 0x9e, 0xd7, 0xe7, 0xfb, 0x09,
	0xd4, 0x8b, 0x75, 0x4d, 0x71, 0xbd, 0x5d, 0x74, 0x7d, 0x71, 0x8a, 0xeb, 0xc7, 0x6a, 0x5d, 0xe4,
	0x6f, 0x8d, 0x26, 0x2c, 0x6a, 0xa5, 0x72, 0x38, 0xc4, 0x2b, 0xb8, 0xb4, 0x59, 0x6b, 0xa9, 0x4f,
	0xef, 0x1e, 0x94, 0x6d, 0x2e, 0xe3, 0xc9, 0x73, 0x72, 0x93, 0x67, 0x87, 0x48, 0xc5, 0x9b, 0x37,
	0x43, 0xd4, 0x80, 0x52, 0xc0, 0x43, 0x43, 0x0a, 0xea, 0xd3, 0xfb, 0x16, 0xe6, 0xd5, 0xfc, 0x91,
	0x73, 0xb0, 0xc8, 0x85, 0x1f, 0x72, 0xfd, 0xf6, 0x2b, 0xb7, 0x16, 0xb8, 0xb8, 0xc7, 0xd3, 0x82,
	0x13, 0x3b, 0x89, 0x36, 0x58, 0x29, 0x17, 0xec, 0x26, 0x2c, 0x05, 0x71, 0x24, 0x59, 0x24, 0xdd,
	0x79, 0xec, 0x82, 0x7f, 0x19, 0x74, 0x6b, 0xad, 0x2e, 0xa2, 0xec, 0x19, 0x7a, 0xff, 0x44, 0xa6,
	0xf4, 0xa5, 0xcf, 0xd0, 0xd7, 0xc0, 0x8a, 0x22, 0x61, 0x01, 0x67, 0xc2, 0xb2, 0xa2, 0x11, 0x73,
	0x0f, 0xdc, 0xf9, 0xc2, 0x03, 0xf7, 0xa7, 0x29, 0x0f, 0x5c, 0x9d, 0x63, 0xe1, 0xcf, 0x25, 0x53,
	0xaa, 0xa9, 0x7f, 0x2e, 0xd1, 0xf8, 0xd4, 0x8b, 0x16, 0xed, 0x5f, 0xe5, 0x45, 0x8b, 0xdb, 0x4f,
	0xbd, 0x68, 0xb5, 0x76, 0xe3, 0xf9, 0x8b, 0x75, 0xe7, 0xcf, 0x17, 0xeb, 0xce, 0xdf, 0x2f, 0xd6,
	0x9d, 0xc3, 0x33, 0x27, 0xdb, 0xd9, 0xdf, 0x71, 0xc5, 0xe2, 0xe2, 0x68, 0x11, 0xff, 0x89, 0x5f,
	0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x95, 0x5e, 0x16, 0xe2, 0x0f, 0x00, 0x00,
}

func (m *CopyrightParty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightParty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightParty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyrightPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyrightPart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyrightPart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.CopyrightParty.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CopyrightPartyKey) > 0 {
		i -= len(m.CopyrightPartyKey)
		copy(dAtA[i:], m.CopyrightPartyKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightPartyKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyrightPublishId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightPublishId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightPublishId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PublishId) > 0 {
		for k := range m.PublishId {
			v := m.PublishId[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCopyright(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCopyright(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCopyright(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CopyrightIp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyrightIp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyrightIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyrightIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.CopyrightIp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CopyrightIpKey) > 0 {
		i -= len(m.CopyrightIpKey)
		copy(dAtA[i:], m.CopyrightIpKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightIpKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyrightOriginDataHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightOriginDataHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightOriginDataHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OriginDataHash) > 0 {
		i -= len(m.OriginDataHash)
		copy(dAtA[i:], m.OriginDataHash)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.OriginDataHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyrightOriginDataHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyrightOriginDataHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyrightOriginDataHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.OriginDataHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CopyrightOriginHashKey) > 0 {
		i -= len(m.CopyrightOriginHashKey)
		copy(dAtA[i:], m.CopyrightOriginHashKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightOriginHashKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyrightBonus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightBonus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightBonus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Downer) > 0 {
		i -= len(m.Downer)
		copy(dAtA[i:], m.Downer)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Downer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyrightBonus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyrightBonus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyrightBonus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.CopyrightBonus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CopyrightBonusAddressKey) > 0 {
		i -= len(m.CopyrightBonusAddressKey)
		copy(dAtA[i:], m.CopyrightBonusAddressKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightBonusAddressKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftInfoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftInfoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftInfoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MetaData) > 0 {
		i -= len(m.MetaData)
		copy(dAtA[i:], m.MetaData)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.MetaData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChineseName) > 0 {
		i -= len(m.ChineseName)
		copy(dAtA[i:], m.ChineseName)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.ChineseName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EnglishName) > 0 {
		i -= len(m.EnglishName)
		copy(dAtA[i:], m.EnglishName)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.EnglishName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisNftInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisNftInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisNftInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.NftInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.NftTokenIdKey) > 0 {
		i -= len(m.NftTokenIdKey)
		copy(dAtA[i:], m.NftTokenIdKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.NftTokenIdKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyrightVoteShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightVoteShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightVoteShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AgainstTotal) > 0 {
		i -= len(m.AgainstTotal)
		copy(dAtA[i:], m.AgainstTotal)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.AgainstTotal)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FavorTotal) > 0 {
		i -= len(m.FavorTotal)
		copy(dAtA[i:], m.FavorTotal)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.FavorTotal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyrightVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyrightVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyrightVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.VoteData) > 0 {
		for k := range m.VoteData {
			v := m.VoteData[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCopyright(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCopyright(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCopyright(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CopyrightVoteKey) > 0 {
		i -= len(m.CopyrightVoteKey)
		copy(dAtA[i:], m.CopyrightVoteKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightVoteKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MortgTime) > 0 {
		i -= len(m.MortgTime)
		copy(dAtA[i:], m.MortgTime)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.MortgTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Power) > 0 {
		i -= len(m.Power)
		copy(dAtA[i:], m.Power)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Power)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Txhash) > 0 {
		i -= len(m.Txhash)
		copy(dAtA[i:], m.Txhash)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Txhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyrightVoteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyrightVoteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyrightVoteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccountVote) > 0 {
		for iNdEx := len(m.AccountVote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountVote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCopyright(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CopyrightVoteListKey) > 0 {
		i -= len(m.CopyrightVoteListKey)
		copy(dAtA[i:], m.CopyrightVoteListKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightVoteListKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CopyrightApproveResultData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightApproveResultData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightApproveResultData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyright) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyright) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyright) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Copyright.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CopyrightKey) > 0 {
		i -= len(m.CopyrightKey)
		copy(dAtA[i:], m.CopyrightKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Copyright) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Copyright) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Copyright) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SecretMap) > 0 {
		for k := range m.SecretMap {
			v := m.SecretMap[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCopyright(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCopyright(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCopyright(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.PicLinkMap) > 0 {
		for k := range m.PicLinkMap {
			v := m.PicLinkMap[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCopyright(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCopyright(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCopyright(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.ApproveStatus != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.ApproveStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.LinkMap) > 0 {
		for k := range m.LinkMap {
			v := m.LinkMap[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCopyright(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCopyright(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCopyright(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.ClassifyUid != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.ClassifyUid))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Ext) > 0 {
		i -= len(m.Ext)
		copy(dAtA[i:], m.Ext)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Ext)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.OriginDatahash) > 0 {
		i -= len(m.OriginDatahash)
		copy(dAtA[i:], m.OriginDatahash)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.OriginDatahash)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChargeRate) > 0 {
		i -= len(m.ChargeRate)
		copy(dAtA[i:], m.ChargeRate)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.ChargeRate)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x5a
	}
	if m.CreateTime != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Size_ != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.Files.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VideoHash) > 0 {
		i -= len(m.VideoHash)
		copy(dAtA[i:], m.VideoHash)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.VideoHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Prehash) > 0 {
		i -= len(m.Prehash)
		copy(dAtA[i:], m.Prehash)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Prehash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Resourcetype) > 0 {
		i -= len(m.Resourcetype)
		copy(dAtA[i:], m.Resourcetype)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Resourcetype)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Values) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Values) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Values) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Val) > 0 {
		for iNdEx := len(m.Val) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Val[iNdEx])
			copy(dAtA[i:], m.Val[iNdEx])
			i = encodeVarintCopyright(dAtA, i, uint64(len(m.Val[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LinkData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LinkData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCopyright(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if m.IsDir {
		i--
		if m.IsDir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CopyrightExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CopyrightExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CopyrightExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Height != 0 {
		i = encodeVarintCopyright(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Species) > 0 {
		i -= len(m.Species)
		copy(dAtA[i:], m.Species)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Species)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Downer) > 0 {
		i -= len(m.Downer)
		copy(dAtA[i:], m.Downer)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.Downer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisCopyrightExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisCopyrightExtra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisCopyrightExtra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.CopyrightExtra.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCopyright(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CopyrightExtraKey) > 0 {
		i -= len(m.CopyrightExtraKey)
		copy(dAtA[i:], m.CopyrightExtraKey)
		i = encodeVarintCopyright(dAtA, i, uint64(len(m.CopyrightExtraKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCopyright(dAtA []byte, offset int, v uint64) int {
	offset -= sovCopyright(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CopyrightParty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyrightPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightPartyKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.CopyrightParty.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyrightPublishId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PublishId) > 0 {
		for k, v := range m.PublishId {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCopyright(uint64(len(k))) + 1 + len(v) + sovCopyright(uint64(len(v)))
			n += mapEntrySize + 1 + sovCopyright(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyrightIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyrightIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightIpKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.CopyrightIp.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyrightOriginDataHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.OriginDataHash)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCopyright(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyrightOriginDataHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightOriginHashKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.OriginDataHash.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyrightBonus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Downer)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovCopyright(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyrightBonus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightBonusAddressKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.CopyrightBonus.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NftInfoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.EnglishName)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.ChineseName)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.MetaData)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisNftInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftTokenIdKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.NftInfo.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyrightVoteShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FavorTotal)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.AgainstTotal)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyrightVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightVoteKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if len(m.VoteData) > 0 {
		for k, v := range m.VoteData {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovCopyright(uint64(len(k))) + 1 + l + sovCopyright(uint64(l))
			n += mapEntrySize + 1 + sovCopyright(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Txhash)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Power)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.MortgTime)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCopyright(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyrightVoteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightVoteListKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if len(m.AccountVote) > 0 {
		for _, e := range m.AccountVote {
			l = e.Size()
			n += 1 + l + sovCopyright(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyrightApproveResultData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyright) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.Copyright.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Copyright) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovCopyright(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Resourcetype)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Prehash)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.VideoHash)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.Files.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.Size_ != 0 {
		n += 1 + sovCopyright(uint64(m.Size_))
	}
	if m.CreateTime != 0 {
		n += 1 + sovCopyright(uint64(m.CreateTime))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.ChargeRate)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.OriginDatahash)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.ClassifyUid != 0 {
		n += 2 + sovCopyright(uint64(m.ClassifyUid))
	}
	if len(m.LinkMap) > 0 {
		for k, v := range m.LinkMap {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovCopyright(uint64(len(k))) + 1 + l + sovCopyright(uint64(l))
			n += mapEntrySize + 2 + sovCopyright(uint64(mapEntrySize))
		}
	}
	if m.ApproveStatus != 0 {
		n += 2 + sovCopyright(uint64(m.ApproveStatus))
	}
	if len(m.PicLinkMap) > 0 {
		for k, v := range m.PicLinkMap {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovCopyright(uint64(len(k))) + 1 + l + sovCopyright(uint64(l))
			n += mapEntrySize + 2 + sovCopyright(uint64(mapEntrySize))
		}
	}
	if len(m.SecretMap) > 0 {
		for k, v := range m.SecretMap {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovCopyright(uint64(len(k))) + 1 + l + sovCopyright(uint64(l))
			n += mapEntrySize + 2 + sovCopyright(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Values) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Val) > 0 {
		for _, b := range m.Val {
			l = len(b)
			n += 1 + l + sovCopyright(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LinkData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovCopyright(uint64(m.Size_))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDir {
		n += 2
	}
	if m.Size_ != 0 {
		n += 1 + sovCopyright(uint64(m.Size_))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovCopyright(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CopyrightExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Downer)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovCopyright(uint64(l))
	l = len(m.Species)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovCopyright(uint64(m.Height))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisCopyrightExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CopyrightExtraKey)
	if l > 0 {
		n += 1 + l + sovCopyright(uint64(l))
	}
	l = m.CopyrightExtra.Size()
	n += 1 + l + sovCopyright(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCopyright(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCopyright(x uint64) (n int) {
	return sovCopyright(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CopyrightParty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightParty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightParty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyrightPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyrightPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyrightPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightPartyKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightPartyKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CopyrightParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyrightPublishId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightPublishId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightPublishId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishId == nil {
				m.PublishId = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCopyright
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCopyright
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCopyright
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCopyright(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCopyright
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PublishId[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyrightIp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightIp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightIp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyrightIp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyrightIp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyrightIp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightIpKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightIpKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CopyrightIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyrightOriginDataHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightOriginDataHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightOriginDataHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginDataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginDataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyrightOriginDataHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyrightOriginDataHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyrightOriginDataHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightOriginHashKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightOriginHashKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginDataHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OriginDataHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyrightBonus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightBonus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightBonus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyrightBonus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyrightBonus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyrightBonus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightBonusAddressKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightBonusAddressKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightBonus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CopyrightBonus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftInfoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftInfoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftInfoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnglishName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChineseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChineseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisNftInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisNftInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisNftInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTokenIdKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTokenIdKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyrightVoteShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightVoteShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightVoteShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavorTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FavorTotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgainstTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgainstTotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyrightVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyrightVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyrightVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightVoteKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightVoteKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VoteData == nil {
				m.VoteData = make(map[string]CopyrightVoteShare)
			}
			var mapkey string
			mapvalue := &CopyrightVoteShare{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCopyright
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCopyright
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCopyright
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CopyrightVoteShare{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCopyright(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCopyright
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.VoteData[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Power = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MortgTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MortgTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyrightVoteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyrightVoteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyrightVoteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightVoteListKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightVoteListKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountVote = append(m.AccountVote, AccountVote{})
			if err := m.AccountVote[len(m.AccountVote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyrightApproveResultData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightApproveResultData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightApproveResultData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyright) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyright: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyright: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copyright", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Copyright.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Copyright) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Copyright: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Copyright: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resourcetype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resourcetype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prehash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prehash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Files.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginDatahash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginDatahash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassifyUid", wireType)
			}
			m.ClassifyUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassifyUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinkMap == nil {
				m.LinkMap = make(map[string]LinkData)
			}
			var mapkey string
			mapvalue := &LinkData{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCopyright
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCopyright
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCopyright
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LinkData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCopyright(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCopyright
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LinkMap[mapkey] = *mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveStatus", wireType)
			}
			m.ApproveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApproveStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicLinkMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PicLinkMap == nil {
				m.PicLinkMap = make(map[string]LinkData)
			}
			var mapkey string
			mapvalue := &LinkData{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCopyright
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCopyright
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCopyright
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LinkData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCopyright(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCopyright
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PicLinkMap[mapkey] = *mapvalue
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecretMap == nil {
				m.SecretMap = make(map[string]Values)
			}
			var mapkey string
			mapvalue := &Values{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCopyright
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCopyright
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCopyright
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCopyright
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCopyright
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Values{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCopyright(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCopyright
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SecretMap[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Values) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Values: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Values: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val, make([]byte, postIndex-iNdEx))
			copy(m.Val[len(m.Val)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDir = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, File{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CopyrightExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CopyrightExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CopyrightExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Species", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Species = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisCopyrightExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisCopyrightExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisCopyrightExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightExtraKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightExtraKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCopyright
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCopyright
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CopyrightExtra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCopyright(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCopyright
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCopyright(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCopyright
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCopyright
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCopyright
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCopyright
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCopyright
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCopyright        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCopyright          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCopyright = fmt.Errorf("proto: unexpected end of group")
)
