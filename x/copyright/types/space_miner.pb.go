// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: space_miner.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package


type AccountSpace struct {
	
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// b
	SpaceTotal string `protobuf:"bytes,2,opt,name=space_total,json=spaceTotal,proto3" json:"space_total,omitempty"`
	// b
	UsedSpace string `protobuf:"bytes,3,opt,name=used_space,json=usedSpace,proto3" json:"used_space,omitempty"`
	
	DeflationAmount GenesisRealCoin `protobuf:"bytes,4,opt,name=deflation_amount,json=deflationAmount,proto3" json:"deflation_amount"`
	
	BuySpace string `protobuf:"bytes,5,opt,name=buy_space,json=buySpace,proto3" json:"buy_space,omitempty"`
	
	RewardSpace string `protobuf:"bytes,6,opt,name=reward_space,json=rewardSpace,proto3" json:"reward_space,omitempty"`
	
	Settlement map[int64]GenesisSettlement `protobuf:"bytes,7,rep,name=settlement,proto3" json:"settlement" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	
	SettlementEnd GenesisSettlement `protobuf:"bytes,8,opt,name=settlement_end,json=settlementEnd,proto3" json:"settlement_end"`
	
	LockedSpace          string   `protobuf:"bytes,9,opt,name=locked_space,json=lockedSpace,proto3" json:"locked_space,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountSpace) Reset()         { *m = AccountSpace{} }
func (m *AccountSpace) String() string { return proto.CompactTextString(m) }
func (*AccountSpace) ProtoMessage()    {}
func (*AccountSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bfe07e4b066086, []int{0}
}
func (m *AccountSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountSpace.Merge(m, src)
}
func (m *AccountSpace) XXX_Size() int {
	return m.Size()
}
func (m *AccountSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountSpace.DiscardUnknown(m)
}

var xxx_messageInfo_AccountSpace proto.InternalMessageInfo

func (m *AccountSpace) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *AccountSpace) GetSpaceTotal() string {
	if m != nil {
		return m.SpaceTotal
	}
	return ""
}

func (m *AccountSpace) GetUsedSpace() string {
	if m != nil {
		return m.UsedSpace
	}
	return ""
}

func (m *AccountSpace) GetDeflationAmount() GenesisRealCoin {
	if m != nil {
		return m.DeflationAmount
	}
	return GenesisRealCoin{}
}

func (m *AccountSpace) GetBuySpace() string {
	if m != nil {
		return m.BuySpace
	}
	return ""
}

func (m *AccountSpace) GetRewardSpace() string {
	if m != nil {
		return m.RewardSpace
	}
	return ""
}

func (m *AccountSpace) GetSettlement() map[int64]GenesisSettlement {
	if m != nil {
		return m.Settlement
	}
	return nil
}

func (m *AccountSpace) GetSettlementEnd() GenesisSettlement {
	if m != nil {
		return m.SettlementEnd
	}
	return GenesisSettlement{}
}

func (m *AccountSpace) GetLockedSpace() string {
	if m != nil {
		return m.LockedSpace
	}
	return ""
}


type DeflationInfor struct {
	
	MinerTotalAmount string `protobuf:"bytes,1,opt,name=miner_total_amount,json=minerTotalAmount,proto3" json:"miner_total_amount,omitempty"`
	
	HasMinerAmount string `protobuf:"bytes,2,opt,name=has_miner_amount,json=hasMinerAmount,proto3" json:"has_miner_amount,omitempty"`
	
	RemainMinerAmount string `protobuf:"bytes,3,opt,name=remain_miner_amount,json=remainMinerAmount,proto3" json:"remain_miner_amount,omitempty"`
	
	DayMinerAmount string `protobuf:"bytes,4,opt,name=day_miner_amount,json=dayMinerAmount,proto3" json:"day_miner_amount,omitempty"`
	
	DayMinerRemain int64 `protobuf:"varint,5,opt,name=day_miner_remain,json=dayMinerRemain,proto3" json:"day_miner_remain,omitempty"`
	
	DeflationStatus int64 `protobuf:"varint,6,opt,name=deflation_status,json=deflationStatus,proto3" json:"deflation_status,omitempty"`
	
	SpaceMinerAmount string `protobuf:"bytes,7,opt,name=space_miner_amount,json=spaceMinerAmount,proto3" json:"space_miner_amount,omitempty"`
	
	SpaceMinerBonus string `protobuf:"bytes,8,opt,name=space_miner_bonus,json=spaceMinerBonus,proto3" json:"space_miner_bonus,omitempty"`
	
	DeflationSpaceTotal string `protobuf:"bytes,9,opt,name=deflation_space_total,json=deflationSpaceTotal,proto3" json:"deflation_space_total,omitempty"`
	
	SpaceTotalIndex []SpaceTotalIndex `protobuf:"bytes,10,rep,name=space_total_index,json=spaceTotalIndex,proto3" json:"space_total_index"`
	
	SpaceMinerAccount    string   `protobuf:"bytes,11,opt,name=space_miner_account,json=spaceMinerAccount,proto3" json:"space_miner_account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeflationInfor) Reset()         { *m = DeflationInfor{} }
func (m *DeflationInfor) String() string { return proto.CompactTextString(m) }
func (*DeflationInfor) ProtoMessage()    {}
func (*DeflationInfor) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bfe07e4b066086, []int{1}
}
func (m *DeflationInfor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeflationInfor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeflationInfor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeflationInfor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeflationInfor.Merge(m, src)
}
func (m *DeflationInfor) XXX_Size() int {
	return m.Size()
}
func (m *DeflationInfor) XXX_DiscardUnknown() {
	xxx_messageInfo_DeflationInfor.DiscardUnknown(m)
}

var xxx_messageInfo_DeflationInfor proto.InternalMessageInfo

func (m *DeflationInfor) GetMinerTotalAmount() string {
	if m != nil {
		return m.MinerTotalAmount
	}
	return ""
}

func (m *DeflationInfor) GetHasMinerAmount() string {
	if m != nil {
		return m.HasMinerAmount
	}
	return ""
}

func (m *DeflationInfor) GetRemainMinerAmount() string {
	if m != nil {
		return m.RemainMinerAmount
	}
	return ""
}

func (m *DeflationInfor) GetDayMinerAmount() string {
	if m != nil {
		return m.DayMinerAmount
	}
	return ""
}

func (m *DeflationInfor) GetDayMinerRemain() int64 {
	if m != nil {
		return m.DayMinerRemain
	}
	return 0
}

func (m *DeflationInfor) GetDeflationStatus() int64 {
	if m != nil {
		return m.DeflationStatus
	}
	return 0
}

func (m *DeflationInfor) GetSpaceMinerAmount() string {
	if m != nil {
		return m.SpaceMinerAmount
	}
	return ""
}

func (m *DeflationInfor) GetSpaceMinerBonus() string {
	if m != nil {
		return m.SpaceMinerBonus
	}
	return ""
}

func (m *DeflationInfor) GetDeflationSpaceTotal() string {
	if m != nil {
		return m.DeflationSpaceTotal
	}
	return ""
}

func (m *DeflationInfor) GetSpaceTotalIndex() []SpaceTotalIndex {
	if m != nil {
		return m.SpaceTotalIndex
	}
	return nil
}

func (m *DeflationInfor) GetSpaceMinerAccount() string {
	if m != nil {
		return m.SpaceMinerAccount
	}
	return ""
}


type SpaceTotalIndex struct {
	//key
	SpaceTotalIndexKey string `protobuf:"bytes,1,opt,name=space_total_index_key,json=spaceTotalIndexKey,proto3" json:"space_total_index_key,omitempty"`
	
	SpaceTotal           string   `protobuf:"bytes,2,opt,name=space_total,json=spaceTotal,proto3" json:"space_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpaceTotalIndex) Reset()         { *m = SpaceTotalIndex{} }
func (m *SpaceTotalIndex) String() string { return proto.CompactTextString(m) }
func (*SpaceTotalIndex) ProtoMessage()    {}
func (*SpaceTotalIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bfe07e4b066086, []int{2}
}
func (m *SpaceTotalIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpaceTotalIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpaceTotalIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpaceTotalIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceTotalIndex.Merge(m, src)
}
func (m *SpaceTotalIndex) XXX_Size() int {
	return m.Size()
}
func (m *SpaceTotalIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceTotalIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceTotalIndex proto.InternalMessageInfo

func (m *SpaceTotalIndex) GetSpaceTotalIndexKey() string {
	if m != nil {
		return m.SpaceTotalIndexKey
	}
	return ""
}

func (m *SpaceTotalIndex) GetSpaceTotal() string {
	if m != nil {
		return m.SpaceTotal
	}
	return ""
}


type GenesisSettlement struct {
	
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	
	IndexSpace           string   `protobuf:"bytes,2,opt,name=index_space,json=indexSpace,proto3" json:"index_space,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisSettlement) Reset()         { *m = GenesisSettlement{} }
func (m *GenesisSettlement) String() string { return proto.CompactTextString(m) }
func (*GenesisSettlement) ProtoMessage()    {}
func (*GenesisSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bfe07e4b066086, []int{3}
}
func (m *GenesisSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisSettlement.Merge(m, src)
}
func (m *GenesisSettlement) XXX_Size() int {
	return m.Size()
}
func (m *GenesisSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisSettlement proto.InternalMessageInfo

func (m *GenesisSettlement) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GenesisSettlement) GetIndexSpace() string {
	if m != nil {
		return m.IndexSpace
	}
	return ""
}


type GenesisRealCoin struct {
	
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	
	Amount               string   `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisRealCoin) Reset()         { *m = GenesisRealCoin{} }
func (m *GenesisRealCoin) String() string { return proto.CompactTextString(m) }
func (*GenesisRealCoin) ProtoMessage()    {}
func (*GenesisRealCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5bfe07e4b066086, []int{4}
}
func (m *GenesisRealCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisRealCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisRealCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisRealCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisRealCoin.Merge(m, src)
}
func (m *GenesisRealCoin) XXX_Size() int {
	return m.Size()
}
func (m *GenesisRealCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisRealCoin.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisRealCoin proto.InternalMessageInfo

func (m *GenesisRealCoin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *GenesisRealCoin) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountSpace)(nil), "copyright.v1beta1.AccountSpace")
	proto.RegisterMapType((map[int64]GenesisSettlement)(nil), "copyright.v1beta1.AccountSpace.SettlementEntry")
	proto.RegisterType((*DeflationInfor)(nil), "copyright.v1beta1.DeflationInfor")
	proto.RegisterType((*SpaceTotalIndex)(nil), "copyright.v1beta1.SpaceTotalIndex")
	proto.RegisterType((*GenesisSettlement)(nil), "copyright.v1beta1.GenesisSettlement")
	proto.RegisterType((*GenesisRealCoin)(nil), "copyright.v1beta1.GenesisRealCoin")
}

func init() { proto.RegisterFile("space_miner.proto", fileDescriptor_e5bfe07e4b066086) }

var fileDescriptor_e5bfe07e4b066086 = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x4d, 0xfa, 0x93, 0x49, 0x69, 0x92, 0x6d, 0x8b, 0xac, 0x22, 0xda, 0x12, 0x71, 0x08,
	0x08, 0x25, 0x6a, 0xb9, 0xa0, 0x5e, 0x50, 0x0b, 0x08, 0x15, 0xc4, 0x01, 0xa7, 0x5c, 0xb8, 0x44,
	0x1b, 0x7b, 0xdb, 0x5a, 0x75, 0x76, 0x23, 0xef, 0xba, 0xd4, 0xcf, 0xc4, 0x81, 0xd7, 0xe8, 0x91,
	0x27, 0x40, 0xa8, 0x4f, 0x82, 0x76, 0xc6, 0x8e, 0xed, 0xb4, 0x15, 0xdc, 0xbc, 0xdf, 0x8c, 0xbf,
	0xf9, 0x66, 0xe7, 0x9b, 0x85, 0x8e, 0x9e, 0x72, 0x5f, 0x8c, 0x26, 0xa1, 0x14, 0x71, 0x7f, 0x1a,
	0x2b, 0xa3, 0x58, 0xc7, 0x57, 0xd3, 0x34, 0x0e, 0xcf, 0xce, 0x4d, 0xff, 0x72, 0x6f, 0x2c, 0x0c,
	0xdf, 0xdb, 0xda, 0x38, 0x53, 0x67, 0x0a, 0xa3, 0x03, 0xfb, 0x45, 0x89, 0xdd, 0x9f, 0x75, 0x58,
	0x3d, 0xf4, 0x7d, 0x95, 0x48, 0x33, 0xb4, 0x2c, 0xcc, 0x85, 0x65, 0x4e, 0x67, 0xd7, 0xd9, 0x75,
	0x7a, 0x0d, 0x2f, 0x3f, 0xb2, 0x1d, 0x68, 0x52, 0x21, 0xa3, 0x0c, 0x8f, 0xdc, 0x05, 0x8c, 0x02,
	0x42, 0x27, 0x16, 0x61, 0x4f, 0x00, 0x12, 0x2d, 0x82, 0x11, 0x42, 0x6e, 0x0d, 0xe3, 0x0d, 0x8b,
	0x10, 0xf3, 0x10, 0xda, 0x81, 0x38, 0x8d, 0xb8, 0x09, 0x95, 0x1c, 0xf1, 0x09, 0x96, 0xa8, 0xef,
	0x3a, 0xbd, 0xe6, 0x7e, 0xb7, 0x7f, 0x4b, 0x6e, 0xff, 0x83, 0x90, 0x42, 0x87, 0xda, 0x13, 0x3c,
	0x7a, 0xab, 0x42, 0x79, 0x54, 0xbf, 0xfe, 0xbd, 0xf3, 0xc0, 0x6b, 0xcd, 0x18, 0x0e, 0x91, 0x80,
	0x3d, 0x86, 0xc6, 0x38, 0x49, 0xb3, 0x92, 0x8b, 0x58, 0x72, 0x65, 0x9c, 0xa4, 0x54, 0xf1, 0x29,
	0xac, 0xc6, 0xe2, 0x3b, 0x8f, 0x73, 0x49, 0x4b, 0x18, 0x6f, 0x12, 0x46, 0x29, 0x5f, 0x01, 0xb4,
	0x30, 0x26, 0x12, 0x13, 0x21, 0x8d, 0xbb, 0xbc, 0x5b, 0xeb, 0x35, 0xf7, 0x07, 0x77, 0xc8, 0x29,
	0xdf, 0x51, 0x7f, 0x38, 0xfb, 0xe3, 0xbd, 0x34, 0x71, 0x9a, 0x69, 0x2b, 0x11, 0xb1, 0x2f, 0xb0,
	0x56, 0x9c, 0x46, 0x42, 0x06, 0xee, 0x0a, 0x76, 0xfa, 0xec, 0xfe, 0x4e, 0x0b, 0xd2, 0x8c, 0xef,
	0xa1, 0x2e, 0x95, 0x09, 0x6c, 0x33, 0x91, 0xf2, 0x2f, 0x66, 0xf7, 0xdb, 0xa0, 0x66, 0x08, 0x43,
	0x5d, 0x5b, 0x3e, 0xb4, 0xe6, 0xa4, 0xb1, 0x36, 0xd4, 0x2e, 0x44, 0x8a, 0xa3, 0xac, 0x79, 0xf6,
	0x93, 0x1d, 0xc0, 0xe2, 0x25, 0x8f, 0x12, 0x81, 0x03, 0xfc, 0x4f, 0x45, 0x1e, 0xfd, 0x72, 0xb0,
	0xf0, 0xda, 0xe9, 0xfe, 0xa8, 0xc3, 0xda, 0xbb, 0x7c, 0x0a, 0xc7, 0xf2, 0x54, 0xc5, 0xec, 0x25,
	0x30, 0x34, 0x1f, 0x39, 0x23, 0x9f, 0x2d, 0xd9, 0xa7, 0x8d, 0x11, 0x34, 0x48, 0x36, 0xb2, 0x1e,
	0xb4, 0xcf, 0xb9, 0x26, 0xbb, 0xe6, 0xb9, 0x64, 0xa6, 0xb5, 0x73, 0xae, 0x3f, 0x5b, 0x38, 0xcb,
	0xec, 0xc3, 0x7a, 0x2c, 0x26, 0x3c, 0x94, 0xd5, 0x64, 0x72, 0x56, 0x87, 0x42, 0xe5, 0xfc, 0x1e,
	0xb4, 0x03, 0x9e, 0x56, 0x93, 0xeb, 0xc4, 0x1c, 0xf0, 0xf4, 0xde, 0x4c, 0x22, 0x42, 0xf7, 0xd4,
	0x8a, 0x4c, 0x0f, 0x51, 0xf6, 0xbc, 0xec, 0x5a, 0x6d, 0xb8, 0x49, 0x34, 0xfa, 0xa8, 0x56, 0xf2,
	0xe2, 0x10, 0x61, 0x7b, 0x0d, 0xa5, 0x4d, 0xcc, 0x05, 0x2c, 0xd3, 0x35, 0x60, 0xa4, 0x2c, 0xe1,
	0x45, 0x65, 0x6f, 0x47, 0x63, 0x25, 0x13, 0x8d, 0x2e, 0x69, 0x78, 0xad, 0x22, 0xf9, 0xc8, 0xc2,
	0x6c, 0x1f, 0x36, 0x4b, 0x22, 0x4a, 0x4b, 0x48, 0x26, 0x58, 0x2f, 0x94, 0x14, 0xdb, 0x78, 0x92,
	0xf3, 0xd3, 0x50, 0x42, 0x19, 0x88, 0x2b, 0x17, 0xd0, 0xe0, 0x77, 0xed, 0x5b, 0xf1, 0xe7, 0xb1,
	0xcd, 0xcc, 0xf7, 0x4d, 0x57, 0x61, 0x3b, 0x92, 0x4a, 0x8f, 0xd9, 0x53, 0xd1, 0xa4, 0x91, 0x94,
	0x9a, 0xa4, 0x40, 0x57, 0x40, 0x6b, 0x8e, 0x99, 0xed, 0xc1, 0xe6, 0x2d, 0x61, 0xa3, 0xdc, 0xa4,
	0x0d, 0x8f, 0xcd, 0x95, 0xfc, 0x24, 0xd2, 0x7f, 0x3e, 0x3d, 0xdd, 0x8f, 0xd0, 0xb9, 0x65, 0x5a,
	0xb6, 0x01, 0x8b, 0xd4, 0x35, 0xb9, 0x9f, 0x0e, 0x96, 0x8b, 0x4a, 0xd2, 0x1a, 0x65, 0x5c, 0x08,
	0xa1, 0xd2, 0xee, 0x1b, 0x68, 0xcd, 0x3d, 0x3e, 0x96, 0x29, 0x10, 0x52, 0x4d, 0x32, 0x89, 0x74,
	0x60, 0x8f, 0x60, 0xa9, 0x62, 0xdf, 0xec, 0x74, 0xb4, 0x73, 0x7d, 0xb3, 0xed, 0xfc, 0xba, 0xd9,
	0x76, 0xfe, 0xdc, 0x6c, 0x3b, 0xdf, 0x3a, 0x57, 0x83, 0xd9, 0x6d, 0x0f, 0x4c, 0x3a, 0x15, 0x7a,
	0xbc, 0x84, 0x6f, 0xef, 0xab, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xe3, 0x41, 0x25, 0xb9,
	0x05, 0x00, 0x00,
}

func (m *AccountSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LockedSpace) > 0 {
		i -= len(m.LockedSpace)
		copy(dAtA[i:], m.LockedSpace)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.LockedSpace)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.SettlementEnd.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSpaceMiner(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Settlement) > 0 {
		for k := range m.Settlement {
			v := m.Settlement[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpaceMiner(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintSpaceMiner(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSpaceMiner(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RewardSpace) > 0 {
		i -= len(m.RewardSpace)
		copy(dAtA[i:], m.RewardSpace)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.RewardSpace)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BuySpace) > 0 {
		i -= len(m.BuySpace)
		copy(dAtA[i:], m.BuySpace)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.BuySpace)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.DeflationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSpaceMiner(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UsedSpace) > 0 {
		i -= len(m.UsedSpace)
		copy(dAtA[i:], m.UsedSpace)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.UsedSpace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SpaceTotal) > 0 {
		i -= len(m.SpaceTotal)
		copy(dAtA[i:], m.SpaceTotal)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.SpaceTotal)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeflationInfor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeflationInfor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeflationInfor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpaceMinerAccount) > 0 {
		i -= len(m.SpaceMinerAccount)
		copy(dAtA[i:], m.SpaceMinerAccount)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.SpaceMinerAccount)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SpaceTotalIndex) > 0 {
		for iNdEx := len(m.SpaceTotalIndex) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpaceTotalIndex[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpaceMiner(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.DeflationSpaceTotal) > 0 {
		i -= len(m.DeflationSpaceTotal)
		copy(dAtA[i:], m.DeflationSpaceTotal)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.DeflationSpaceTotal)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SpaceMinerBonus) > 0 {
		i -= len(m.SpaceMinerBonus)
		copy(dAtA[i:], m.SpaceMinerBonus)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.SpaceMinerBonus)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SpaceMinerAmount) > 0 {
		i -= len(m.SpaceMinerAmount)
		copy(dAtA[i:], m.SpaceMinerAmount)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.SpaceMinerAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DeflationStatus != 0 {
		i = encodeVarintSpaceMiner(dAtA, i, uint64(m.DeflationStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.DayMinerRemain != 0 {
		i = encodeVarintSpaceMiner(dAtA, i, uint64(m.DayMinerRemain))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DayMinerAmount) > 0 {
		i -= len(m.DayMinerAmount)
		copy(dAtA[i:], m.DayMinerAmount)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.DayMinerAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RemainMinerAmount) > 0 {
		i -= len(m.RemainMinerAmount)
		copy(dAtA[i:], m.RemainMinerAmount)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.RemainMinerAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HasMinerAmount) > 0 {
		i -= len(m.HasMinerAmount)
		copy(dAtA[i:], m.HasMinerAmount)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.HasMinerAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinerTotalAmount) > 0 {
		i -= len(m.MinerTotalAmount)
		copy(dAtA[i:], m.MinerTotalAmount)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.MinerTotalAmount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpaceTotalIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceTotalIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpaceTotalIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SpaceTotal) > 0 {
		i -= len(m.SpaceTotal)
		copy(dAtA[i:], m.SpaceTotal)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.SpaceTotal)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpaceTotalIndexKey) > 0 {
		i -= len(m.SpaceTotalIndexKey)
		copy(dAtA[i:], m.SpaceTotalIndexKey)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.SpaceTotalIndexKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IndexSpace) > 0 {
		i -= len(m.IndexSpace)
		copy(dAtA[i:], m.IndexSpace)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.IndexSpace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintSpaceMiner(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisRealCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisRealCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisRealCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintSpaceMiner(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpaceMiner(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpaceMiner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.SpaceTotal)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.UsedSpace)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = m.DeflationAmount.Size()
	n += 1 + l + sovSpaceMiner(uint64(l))
	l = len(m.BuySpace)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.RewardSpace)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if len(m.Settlement) > 0 {
		for k, v := range m.Settlement {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovSpaceMiner(uint64(k)) + 1 + l + sovSpaceMiner(uint64(l))
			n += mapEntrySize + 1 + sovSpaceMiner(uint64(mapEntrySize))
		}
	}
	l = m.SettlementEnd.Size()
	n += 1 + l + sovSpaceMiner(uint64(l))
	l = len(m.LockedSpace)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeflationInfor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinerTotalAmount)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.HasMinerAmount)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.RemainMinerAmount)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.DayMinerAmount)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if m.DayMinerRemain != 0 {
		n += 1 + sovSpaceMiner(uint64(m.DayMinerRemain))
	}
	if m.DeflationStatus != 0 {
		n += 1 + sovSpaceMiner(uint64(m.DeflationStatus))
	}
	l = len(m.SpaceMinerAmount)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.SpaceMinerBonus)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.DeflationSpaceTotal)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if len(m.SpaceTotalIndex) > 0 {
		for _, e := range m.SpaceTotalIndex {
			l = e.Size()
			n += 1 + l + sovSpaceMiner(uint64(l))
		}
	}
	l = len(m.SpaceMinerAccount)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpaceTotalIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpaceTotalIndexKey)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.SpaceTotal)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovSpaceMiner(uint64(m.Index))
	}
	l = len(m.IndexSpace)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisRealCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovSpaceMiner(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpaceMiner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpaceMiner(x uint64) (n int) {
	return sovSpaceMiner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaceMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceTotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeflationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeflationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuySpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuySpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settlement == nil {
				m.Settlement = make(map[int64]GenesisSettlement)
			}
			var mapkey int64
			mapvalue := &GenesisSettlement{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpaceMiner
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpaceMiner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpaceMiner
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpaceMiner
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpaceMiner
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GenesisSettlement{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpaceMiner(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSpaceMiner
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Settlement[mapkey] = *mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SettlementEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaceMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeflationInfor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaceMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeflationInfor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeflationInfor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinerTotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinerTotalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMinerAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HasMinerAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainMinerAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainMinerAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMinerAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayMinerAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayMinerRemain", wireType)
			}
			m.DayMinerRemain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayMinerRemain |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeflationStatus", wireType)
			}
			m.DeflationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeflationStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceMinerAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceMinerAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceMinerBonus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceMinerBonus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeflationSpaceTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeflationSpaceTotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceTotalIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceTotalIndex = append(m.SpaceTotalIndex, SpaceTotalIndex{})
			if err := m.SpaceTotalIndex[len(m.SpaceTotalIndex)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceMinerAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceMinerAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaceMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceTotalIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaceMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceTotalIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceTotalIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceTotalIndexKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceTotalIndexKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceTotal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaceMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaceMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaceMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisRealCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaceMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisRealCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisRealCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaceMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpaceMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpaceMiner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpaceMiner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpaceMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpaceMiner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpaceMiner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpaceMiner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpaceMiner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpaceMiner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpaceMiner = fmt.Errorf("proto: unexpected end of group")
)
