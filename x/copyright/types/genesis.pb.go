// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the capability module's genesis state.
type GenesisState struct {
	// this line is used by starport scaffolding # genesis/proto/state
	
	AccountSpace []AccountSpace `protobuf:"bytes,1,rep,name=account_space,json=accountSpace,proto3" json:"account_space"`
	
	DeflationInfor DeflationInfor `protobuf:"bytes,2,opt,name=deflation_infor,json=deflationInfor,proto3" json:"deflation_infor"`
	
	InviteRelation []InviteRelation `protobuf:"bytes,3,rep,name=invite_relation,json=inviteRelation,proto3" json:"invite_relation"`
	
	InviteRecords []InviteRecords `protobuf:"bytes,4,rep,name=invite_records,json=inviteRecords,proto3" json:"invite_records"`
	
	InviteReward []InviteReward `protobuf:"bytes,5,rep,name=invite_reward,json=inviteReward,proto3" json:"invite_reward"`
	
	InvitesStatistics []InvitesStatistics `protobuf:"bytes,6,rep,name=invites_statistics,json=invitesStatistics,proto3" json:"invites_statistics"`
	
	CopyrightPart []GenesisCopyrightPart `protobuf:"bytes,7,rep,name=copyright_part,json=copyrightPart,proto3" json:"copyright_part"`
	//ID
	CpyrightPublishId CopyrightPublishId `protobuf:"bytes,8,opt,name=cpyright_publish_id,json=cpyrightPublishId,proto3" json:"cpyright_publish_id"`
	
	Copyright []GenesisCopyright `protobuf:"bytes,9,rep,name=copyright,proto3" json:"copyright"`
	
	CopyrightExtra []GenesisCopyrightExtra `protobuf:"bytes,10,rep,name=copyright_extra,json=copyrightExtra,proto3" json:"copyright_extra"`
	//IP
	CopyrightIp []GenesisCopyrightIp `protobuf:"bytes,11,rep,name=copyright_ip,json=copyrightIp,proto3" json:"copyright_ip"`
	
	CopyrightOriginHash []GenesisCopyrightOriginDataHash `protobuf:"bytes,12,rep,name=copyright_origin_hash,json=copyrightOriginHash,proto3" json:"copyright_origin_hash"`
	
	CopyrightBonus []GenesisCopyrightBonus `protobuf:"bytes,13,rep,name=copyright_bonus,json=copyrightBonus,proto3" json:"copyright_bonus"`
	//NFT
	NftInfo []GenesisNftInfo `protobuf:"bytes,14,rep,name=nft_info,json=nftInfo,proto3" json:"nft_info"`
	
	CopyrightVote []GenesisCopyrightVote `protobuf:"bytes,15,rep,name=copyright_vote,json=copyrightVote,proto3" json:"copyright_vote"`
	
	CopyrightVoteList []GenesisCopyrightVoteList `protobuf:"bytes,16,rep,name=copyright_vote_list,json=copyrightVoteList,proto3" json:"copyright_vote_list"`
	
	ApproveResult []CopyrightApproveResultData `protobuf:"bytes,17,rep,name=approve_result,json=approveResult,proto3" json:"approve_result"`
	
	CopyrightVoteRedeem string `protobuf:"bytes,18,opt,name=copyright_vote_redeem,json=copyrightVoteRedeem,proto3" json:"copyright_vote_redeem,omitempty"`
	
	Params Params `protobuf:"bytes,19,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetAccountSpace() []AccountSpace {
	if m != nil {
		return m.AccountSpace
	}
	return nil
}

func (m *GenesisState) GetDeflationInfor() DeflationInfor {
	if m != nil {
		return m.DeflationInfor
	}
	return DeflationInfor{}
}

func (m *GenesisState) GetInviteRelation() []InviteRelation {
	if m != nil {
		return m.InviteRelation
	}
	return nil
}

func (m *GenesisState) GetInviteRecords() []InviteRecords {
	if m != nil {
		return m.InviteRecords
	}
	return nil
}

func (m *GenesisState) GetInviteReward() []InviteReward {
	if m != nil {
		return m.InviteReward
	}
	return nil
}

func (m *GenesisState) GetInvitesStatistics() []InvitesStatistics {
	if m != nil {
		return m.InvitesStatistics
	}
	return nil
}

func (m *GenesisState) GetCopyrightPart() []GenesisCopyrightPart {
	if m != nil {
		return m.CopyrightPart
	}
	return nil
}

func (m *GenesisState) GetCpyrightPublishId() CopyrightPublishId {
	if m != nil {
		return m.CpyrightPublishId
	}
	return CopyrightPublishId{}
}

func (m *GenesisState) GetCopyright() []GenesisCopyright {
	if m != nil {
		return m.Copyright
	}
	return nil
}

func (m *GenesisState) GetCopyrightExtra() []GenesisCopyrightExtra {
	if m != nil {
		return m.CopyrightExtra
	}
	return nil
}

func (m *GenesisState) GetCopyrightIp() []GenesisCopyrightIp {
	if m != nil {
		return m.CopyrightIp
	}
	return nil
}

func (m *GenesisState) GetCopyrightOriginHash() []GenesisCopyrightOriginDataHash {
	if m != nil {
		return m.CopyrightOriginHash
	}
	return nil
}

func (m *GenesisState) GetCopyrightBonus() []GenesisCopyrightBonus {
	if m != nil {
		return m.CopyrightBonus
	}
	return nil
}

func (m *GenesisState) GetNftInfo() []GenesisNftInfo {
	if m != nil {
		return m.NftInfo
	}
	return nil
}

func (m *GenesisState) GetCopyrightVote() []GenesisCopyrightVote {
	if m != nil {
		return m.CopyrightVote
	}
	return nil
}

func (m *GenesisState) GetCopyrightVoteList() []GenesisCopyrightVoteList {
	if m != nil {
		return m.CopyrightVoteList
	}
	return nil
}

func (m *GenesisState) GetApproveResult() []CopyrightApproveResultData {
	if m != nil {
		return m.ApproveResult
	}
	return nil
}

func (m *GenesisState) GetCopyrightVoteRedeem() string {
	if m != nil {
		return m.CopyrightVoteRedeem
	}
	return ""
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type Params struct {
	
	BlackList []string `protobuf:"bytes,1,rep,name=black_list,json=blackList,proto3" json:"black_list,omitempty"`
	
	WhiteList []string `protobuf:"bytes,2,rep,name=white_list,json=whiteList,proto3" json:"white_list,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_14205810582f3203, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBlackList() []string {
	if m != nil {
		return m.BlackList
	}
	return nil
}

func (m *Params) GetWhiteList() []string {
	if m != nil {
		return m.WhiteList
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "copyright.v1beta1.GenesisState")
	proto.RegisterType((*Params)(nil), "copyright.v1beta1.Params")
}

func init() { proto.RegisterFile("genesis.proto", fileDescriptor_14205810582f3203) }

var fileDescriptor_14205810582f3203 = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcf, 0x4e, 0x1b, 0x3b,
	0x14, 0xc6, 0x13, 0xe0, 0x06, 0xe2, 0xfc, 0xe1, 0xc6, 0xb9, 0xb7, 0x32, 0x54, 0x84, 0x94, 0x16,
	0x35, 0x12, 0x6a, 0x10, 0x74, 0xd1, 0x35, 0x94, 0x96, 0xa6, 0x6a, 0x29, 0x0a, 0x55, 0xab, 0xd2,
	0xc5, 0xc8, 0x99, 0x38, 0x89, 0x45, 0x18, 0x8f, 0x6c, 0x27, 0xc0, 0x5b, 0xf4, 0x25, 0xfa, 0x2e,
	0x2c, 0x59, 0x76, 0x55, 0x55, 0xf0, 0x22, 0x95, 0xcf, 0x78, 0x32, 0x33, 0x10, 0xd0, 0xec, 0xc8,
	0xf7, 0x7d, 0xfe, 0xf9, 0xf8, 0xf8, 0x98, 0x41, 0xa5, 0x3e, 0xf3, 0x98, 0xe2, 0xaa, 0xe9, 0x4b,
	0xa1, 0x05, 0xae, 0xb8, 0xc2, 0xbf, 0x90, 0xbc, 0x3f, 0xd0, 0xcd, 0xf1, 0x56, 0x87, 0x69, 0xba,
	0xb5, 0xfc, 0x5f, 0x5f, 0xf4, 0x05, 0xb8, 0x9b, 0xe6, 0xaf, 0x20, 0xb8, 0xfc, 0x78, 0x12, 0xdc,
	0x54, 0x3e, 0x75, 0x99, 0x73, 0xca, 0x3d, 0x26, 0xad, 0xf9, 0x28, 0x32, 0x5b, 0xde, 0x98, 0x6b,
	0x66, 0xf5, 0xa5, 0x48, 0x8f, 0xf6, 0x01, 0x6b, 0xed, 0x67, 0x11, 0x15, 0xf7, 0x83, 0x52, 0x8e,
	0x34, 0xd5, 0x0c, 0xbf, 0x47, 0x25, 0xea, 0xba, 0x62, 0xe4, 0x69, 0x07, 0x36, 0x20, 0xd9, 0xfa,
	0x6c, 0xa3, 0xb0, 0xbd, 0xda, 0xbc, 0x53, 0x61, 0x73, 0x27, 0xc8, 0x1d, 0x99, 0xd8, 0xee, 0xdc,
	0xe5, 0xef, 0xd5, 0x4c, 0xbb, 0x48, 0x63, 0x1a, 0x3e, 0x44, 0x8b, 0x5d, 0xd6, 0x1b, 0x52, 0xcd,
	0x85, 0xe7, 0x70, 0xaf, 0x27, 0x24, 0x99, 0xa9, 0x67, 0x1b, 0x85, 0xed, 0x27, 0x53, 0x68, 0x7b,
	0x61, 0xb2, 0x65, 0x82, 0x96, 0x57, 0xee, 0x26, 0x54, 0x43, 0xe4, 0x70, 0x32, 0x47, 0xb2, 0x40,
	0x27, 0xb3, 0x50, 0xdf, 0x34, 0x62, 0xd0, 0x83, 0xb6, 0x0d, 0x86, 0x44, 0x9e, 0x50, 0xf1, 0x47,
	0x54, 0x9e, 0x10, 0x5d, 0x21, 0xbb, 0x8a, 0xcc, 0x01, 0xb0, 0xfe, 0x00, 0x10, 0x72, 0x96, 0x57,
	0xe2, 0x71, 0xd1, 0xb4, 0x6f, 0x82, 0x3b, 0xa3, 0xb2, 0x4b, 0xfe, 0xb9, 0xb7, 0x7d, 0x21, 0xcd,
	0xc4, 0xc2, 0xf6, 0xf1, 0x98, 0x86, 0xbf, 0x21, 0x1c, 0xfc, 0x56, 0x8e, 0xd2, 0x54, 0x73, 0xa5,
	0xb9, 0xab, 0x48, 0x0e, 0x80, 0xcf, 0xee, 0x05, 0xc2, 0x3d, 0x06, 0x59, 0x4b, 0xad, 0xf0, 0xdb,
	0x06, 0xfe, 0x8c, 0xca, 0x93, 0xf5, 0x8e, 0x4f, 0xa5, 0x26, 0xf3, 0x80, 0x7d, 0x3e, 0x05, 0x6b,
	0xc7, 0xe3, 0x75, 0x68, 0x1c, 0x52, 0xa9, 0xc3, 0xc3, 0xbb, 0x71, 0x11, 0x7f, 0x47, 0x55, 0x77,
	0x02, 0x1d, 0x75, 0x86, 0x5c, 0x0d, 0x1c, 0xde, 0x25, 0x0b, 0x70, 0xe7, 0xeb, 0x53, 0xd0, 0x11,
	0x33, 0x48, 0xb7, 0xc2, 0x46, 0x54, 0xdc, 0xdb, 0x06, 0xde, 0x47, 0xf9, 0x09, 0x80, 0xe4, 0xa1,
	0xda, 0xa7, 0x29, 0xaa, 0xb5, 0xc0, 0x68, 0x2d, 0xfe, 0x8a, 0x16, 0xa3, 0xb3, 0xb3, 0x73, 0x2d,
	0x29, 0x41, 0x80, 0x6b, 0xa4, 0xc0, 0xbd, 0x31, 0xf9, 0x70, 0x94, 0xdc, 0x84, 0x8a, 0x0f, 0x50,
	0x31, 0x02, 0x73, 0x9f, 0x14, 0x80, 0xba, 0x9e, 0x82, 0xda, 0xf2, 0x2d, 0xb2, 0xe0, 0x46, 0x12,
	0x3e, 0x41, 0xff, 0x47, 0x3c, 0x21, 0x79, 0x9f, 0x7b, 0xce, 0x80, 0xaa, 0x01, 0x29, 0x02, 0x78,
	0x2b, 0x05, 0xf8, 0x13, 0xac, 0xda, 0xa3, 0x9a, 0xbe, 0xa3, 0x6a, 0x60, 0x37, 0xa9, 0xba, 0x49,
	0xdb, 0x58, 0xc9, 0xae, 0x74, 0x84, 0x37, 0x52, 0xa4, 0x94, 0xba, 0x2b, 0xbb, 0x26, 0x7f, 0xa7,
	0x2b, 0xa0, 0xe2, 0x5d, 0xb4, 0xe0, 0xf5, 0x34, 0x3c, 0x7f, 0x52, 0xbe, 0xf7, 0xad, 0x5a, 0xe2,
	0x41, 0x4f, 0x9b, 0x87, 0x6e, 0x51, 0xf3, 0x5e, 0xf0, 0x33, 0x39, 0xae, 0x63, 0xa1, 0x19, 0x59,
	0x4c, 0x3d, 0xae, 0x5f, 0x84, 0x66, 0x77, 0xc6, 0xd5, 0x88, 0x98, 0xa2, 0x6a, 0x92, 0xea, 0x0c,
	0xb9, 0xd2, 0xe4, 0x5f, 0x40, 0x6f, 0xa4, 0x44, 0x7f, 0xe0, 0x4a, 0x4f, 0x86, 0xf6, 0xb6, 0x81,
	0x8f, 0x51, 0x99, 0xfa, 0xbe, 0x14, 0x63, 0xf3, 0xff, 0x40, 0x8d, 0x86, 0x9a, 0x54, 0x80, 0xfe,
	0xe2, 0xa1, 0xc7, 0xb0, 0x13, 0xac, 0x68, 0xc3, 0x02, 0x73, 0x77, 0x61, 0xf9, 0x34, 0x6e, 0xe0,
	0xed, 0xf8, 0x78, 0x40, 0xf9, 0x92, 0x75, 0x19, 0x3b, 0x25, 0xb8, 0x9e, 0x6d, 0xe4, 0x63, 0xb7,
	0x6c, 0xaa, 0x69, 0x83, 0x85, 0x5f, 0xa1, 0x9c, 0x4f, 0x25, 0x3d, 0x55, 0xa4, 0x0a, 0x8f, 0x72,
	0x69, 0x4a, 0x1d, 0x87, 0x10, 0xb0, 0x7b, 0xda, 0xf8, 0xda, 0x5b, 0x94, 0x0b, 0x74, 0xbc, 0x82,
	0x50, 0x67, 0x48, 0xdd, 0x93, 0xa0, 0x59, 0xe6, 0xeb, 0x90, 0x6f, 0xe7, 0x41, 0x81, 0x13, 0xaf,
	0x20, 0x74, 0x36, 0xe0, 0x61, 0x2f, 0x67, 0x02, 0x1b, 0x14, 0xe8, 0xd4, 0xc6, 0xe5, 0x75, 0x2d,
	0x7b, 0x75, 0x5d, 0xcb, 0xfe, 0xb9, 0xae, 0x65, 0x7f, 0xdc, 0xd4, 0x32, 0x57, 0x37, 0xb5, 0xcc,
	0xaf, 0x9b, 0x5a, 0xe6, 0xb8, 0x72, 0x1e, 0x7d, 0x9c, 0x36, 0xf5, 0x85, 0xcf, 0x54, 0x27, 0x07,
	0xdf, 0xa8, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21, 0x90, 0xfc, 0xd4, 0x2d, 0x07, 0x00,
	0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if len(m.CopyrightVoteRedeem) > 0 {
		i -= len(m.CopyrightVoteRedeem)
		copy(dAtA[i:], m.CopyrightVoteRedeem)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CopyrightVoteRedeem)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ApproveResult) > 0 {
		for iNdEx := len(m.ApproveResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApproveResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.CopyrightVoteList) > 0 {
		for iNdEx := len(m.CopyrightVoteList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CopyrightVoteList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.CopyrightVote) > 0 {
		for iNdEx := len(m.CopyrightVote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CopyrightVote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.NftInfo) > 0 {
		for iNdEx := len(m.NftInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.CopyrightBonus) > 0 {
		for iNdEx := len(m.CopyrightBonus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CopyrightBonus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.CopyrightOriginHash) > 0 {
		for iNdEx := len(m.CopyrightOriginHash) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CopyrightOriginHash[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.CopyrightIp) > 0 {
		for iNdEx := len(m.CopyrightIp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CopyrightIp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.CopyrightExtra) > 0 {
		for iNdEx := len(m.CopyrightExtra) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CopyrightExtra[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Copyright) > 0 {
		for iNdEx := len(m.Copyright) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Copyright[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size, err := m.CpyrightPublishId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.CopyrightPart) > 0 {
		for iNdEx := len(m.CopyrightPart) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CopyrightPart[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.InvitesStatistics) > 0 {
		for iNdEx := len(m.InvitesStatistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InvitesStatistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.InviteReward) > 0 {
		for iNdEx := len(m.InviteReward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InviteReward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InviteRecords) > 0 {
		for iNdEx := len(m.InviteRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InviteRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InviteRelation) > 0 {
		for iNdEx := len(m.InviteRelation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InviteRelation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.DeflationInfor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AccountSpace) > 0 {
		for iNdEx := len(m.AccountSpace) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountSpace[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhiteList) > 0 {
		for iNdEx := len(m.WhiteList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WhiteList[iNdEx])
			copy(dAtA[i:], m.WhiteList[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.WhiteList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BlackList) > 0 {
		for iNdEx := len(m.BlackList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlackList[iNdEx])
			copy(dAtA[i:], m.BlackList[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.BlackList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountSpace) > 0 {
		for _, e := range m.AccountSpace {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.DeflationInfor.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.InviteRelation) > 0 {
		for _, e := range m.InviteRelation {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.InviteRecords) > 0 {
		for _, e := range m.InviteRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.InviteReward) > 0 {
		for _, e := range m.InviteReward {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.InvitesStatistics) > 0 {
		for _, e := range m.InvitesStatistics {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CopyrightPart) > 0 {
		for _, e := range m.CopyrightPart {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.CpyrightPublishId.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Copyright) > 0 {
		for _, e := range m.Copyright {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CopyrightExtra) > 0 {
		for _, e := range m.CopyrightExtra {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CopyrightIp) > 0 {
		for _, e := range m.CopyrightIp {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CopyrightOriginHash) > 0 {
		for _, e := range m.CopyrightOriginHash {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CopyrightBonus) > 0 {
		for _, e := range m.CopyrightBonus {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NftInfo) > 0 {
		for _, e := range m.NftInfo {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CopyrightVote) > 0 {
		for _, e := range m.CopyrightVote {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CopyrightVoteList) > 0 {
		for _, e := range m.CopyrightVoteList {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ApproveResult) > 0 {
		for _, e := range m.ApproveResult {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.CopyrightVoteRedeem)
	if l > 0 {
		n += 2 + l + sovGenesis(uint64(l))
	}
	l = m.Params.Size()
	n += 2 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlackList) > 0 {
		for _, s := range m.BlackList {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.WhiteList) > 0 {
		for _, s := range m.WhiteList {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountSpace = append(m.AccountSpace, AccountSpace{})
			if err := m.AccountSpace[len(m.AccountSpace)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeflationInfor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeflationInfor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRelation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteRelation = append(m.InviteRelation, InviteRelation{})
			if err := m.InviteRelation[len(m.InviteRelation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteRecords = append(m.InviteRecords, InviteRecords{})
			if err := m.InviteRecords[len(m.InviteRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteReward = append(m.InviteReward, InviteReward{})
			if err := m.InviteReward[len(m.InviteReward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitesStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitesStatistics = append(m.InvitesStatistics, InvitesStatistics{})
			if err := m.InvitesStatistics[len(m.InvitesStatistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightPart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightPart = append(m.CopyrightPart, GenesisCopyrightPart{})
			if err := m.CopyrightPart[len(m.CopyrightPart)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpyrightPublishId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CpyrightPublishId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Copyright", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Copyright = append(m.Copyright, GenesisCopyright{})
			if err := m.Copyright[len(m.Copyright)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightExtra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightExtra = append(m.CopyrightExtra, GenesisCopyrightExtra{})
			if err := m.CopyrightExtra[len(m.CopyrightExtra)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightIp = append(m.CopyrightIp, GenesisCopyrightIp{})
			if err := m.CopyrightIp[len(m.CopyrightIp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightOriginHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightOriginHash = append(m.CopyrightOriginHash, GenesisCopyrightOriginDataHash{})
			if err := m.CopyrightOriginHash[len(m.CopyrightOriginHash)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightBonus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightBonus = append(m.CopyrightBonus, GenesisCopyrightBonus{})
			if err := m.CopyrightBonus[len(m.CopyrightBonus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftInfo = append(m.NftInfo, GenesisNftInfo{})
			if err := m.NftInfo[len(m.NftInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightVote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightVote = append(m.CopyrightVote, GenesisCopyrightVote{})
			if err := m.CopyrightVote[len(m.CopyrightVote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightVoteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightVoteList = append(m.CopyrightVoteList, GenesisCopyrightVoteList{})
			if err := m.CopyrightVoteList[len(m.CopyrightVoteList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproveResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproveResult = append(m.ApproveResult, CopyrightApproveResultData{})
			if err := m.ApproveResult[len(m.ApproveResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopyrightVoteRedeem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CopyrightVoteRedeem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlackList = append(m.BlackList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteList = append(m.WhiteList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
