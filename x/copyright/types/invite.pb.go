// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: invite.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package


type InviteRelation struct {
	//key
	InviteRelationKey string `protobuf:"bytes,1,opt,name=invite_relation_key,json=inviteRelationKey,proto3" json:"invite_relation_key,omitempty"`
	
	InviteAddress        string   `protobuf:"bytes,2,opt,name=invite_address,json=inviteAddress,proto3" json:"invite_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InviteRelation) Reset()         { *m = InviteRelation{} }
func (m *InviteRelation) String() string { return proto.CompactTextString(m) }
func (*InviteRelation) ProtoMessage()    {}
func (*InviteRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2965078476053c3, []int{0}
}
func (m *InviteRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteRelation.Merge(m, src)
}
func (m *InviteRelation) XXX_Size() int {
	return m.Size()
}
func (m *InviteRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteRelation.DiscardUnknown(m)
}

var xxx_messageInfo_InviteRelation proto.InternalMessageInfo

func (m *InviteRelation) GetInviteRelationKey() string {
	if m != nil {
		return m.InviteRelationKey
	}
	return ""
}

func (m *InviteRelation) GetInviteAddress() string {
	if m != nil {
		return m.InviteAddress
	}
	return ""
}


type InviteRecords struct {
	
	InviteRecordingKey string `protobuf:"bytes,1,opt,name=invite_recording_key,json=inviteRecordingKey,proto3" json:"invite_recording_key,omitempty"`
	
	AccountInviteRecord  []AccountInviteRecord `protobuf:"bytes,2,rep,name=account_invite_record,json=accountInviteRecord,proto3" json:"account_invite_record"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *InviteRecords) Reset()         { *m = InviteRecords{} }
func (m *InviteRecords) String() string { return proto.CompactTextString(m) }
func (*InviteRecords) ProtoMessage()    {}
func (*InviteRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2965078476053c3, []int{1}
}
func (m *InviteRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteRecords.Merge(m, src)
}
func (m *InviteRecords) XXX_Size() int {
	return m.Size()
}
func (m *InviteRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteRecords.DiscardUnknown(m)
}

var xxx_messageInfo_InviteRecords proto.InternalMessageInfo

func (m *InviteRecords) GetInviteRecordingKey() string {
	if m != nil {
		return m.InviteRecordingKey
	}
	return ""
}

func (m *InviteRecords) GetAccountInviteRecord() []AccountInviteRecord {
	if m != nil {
		return m.AccountInviteRecord
	}
	return nil
}


type AccountInviteRecord struct {
	
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	
	InviteTime int64 `protobuf:"varint,2,opt,name=invite_time,json=inviteTime,proto3" json:"invite_time,omitempty"`
	
	Space                string   `protobuf:"bytes,3,opt,name=space,proto3" json:"space,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountInviteRecord) Reset()         { *m = AccountInviteRecord{} }
func (m *AccountInviteRecord) String() string { return proto.CompactTextString(m) }
func (*AccountInviteRecord) ProtoMessage()    {}
func (*AccountInviteRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2965078476053c3, []int{2}
}
func (m *AccountInviteRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountInviteRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountInviteRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountInviteRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountInviteRecord.Merge(m, src)
}
func (m *AccountInviteRecord) XXX_Size() int {
	return m.Size()
}
func (m *AccountInviteRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountInviteRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AccountInviteRecord proto.InternalMessageInfo

func (m *AccountInviteRecord) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountInviteRecord) GetInviteTime() int64 {
	if m != nil {
		return m.InviteTime
	}
	return 0
}

func (m *AccountInviteRecord) GetSpace() string {
	if m != nil {
		return m.Space
	}
	return ""
}


type InviteReward struct {
	//key
	InviteRewardKey string `protobuf:"bytes,1,opt,name=invite_reward_key,json=inviteRewardKey,proto3" json:"invite_reward_key,omitempty"`
	
	InviteSettlement     InviteSettlement `protobuf:"bytes,2,opt,name=invite_settlement,json=inviteSettlement,proto3" json:"invite_settlement"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InviteReward) Reset()         { *m = InviteReward{} }
func (m *InviteReward) String() string { return proto.CompactTextString(m) }
func (*InviteReward) ProtoMessage()    {}
func (*InviteReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2965078476053c3, []int{3}
}
func (m *InviteReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteReward.Merge(m, src)
}
func (m *InviteReward) XXX_Size() int {
	return m.Size()
}
func (m *InviteReward) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteReward.DiscardUnknown(m)
}

var xxx_messageInfo_InviteReward proto.InternalMessageInfo

func (m *InviteReward) GetInviteRewardKey() string {
	if m != nil {
		return m.InviteRewardKey
	}
	return ""
}

func (m *InviteReward) GetInviteSettlement() InviteSettlement {
	if m != nil {
		return m.InviteSettlement
	}
	return InviteSettlement{}
}


type InviteSettlement struct {
	//(10%)
	ExpansionRewardSpace string `protobuf:"bytes,1,opt,name=expansion_reward_space,json=expansionRewardSpace,proto3" json:"expansion_reward_space,omitempty"`
	//(80%)
	InviteRewardSpace    string   `protobuf:"bytes,2,opt,name=invite_reward_space,json=inviteRewardSpace,proto3" json:"invite_reward_space,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InviteSettlement) Reset()         { *m = InviteSettlement{} }
func (m *InviteSettlement) String() string { return proto.CompactTextString(m) }
func (*InviteSettlement) ProtoMessage()    {}
func (*InviteSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2965078476053c3, []int{4}
}
func (m *InviteSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InviteSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InviteSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InviteSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteSettlement.Merge(m, src)
}
func (m *InviteSettlement) XXX_Size() int {
	return m.Size()
}
func (m *InviteSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_InviteSettlement proto.InternalMessageInfo

func (m *InviteSettlement) GetExpansionRewardSpace() string {
	if m != nil {
		return m.ExpansionRewardSpace
	}
	return ""
}

func (m *InviteSettlement) GetInviteRewardSpace() string {
	if m != nil {
		return m.InviteRewardSpace
	}
	return ""
}


type InvitesStatistics struct {
	//key
	InvitesStatisticsKey string `protobuf:"bytes,1,opt,name=invites_statistics_key,json=invitesStatisticsKey,proto3" json:"invites_statistics_key,omitempty"`
	
	InviteRewardStatistics GenesisInviteRewardStatistics `protobuf:"bytes,2,opt,name=invite_reward_statistics,json=inviteRewardStatistics,proto3" json:"invite_reward_statistics"`
	XXX_NoUnkeyedLiteral   struct{}                      `json:"-"`
	XXX_unrecognized       []byte                        `json:"-"`
	XXX_sizecache          int32                         `json:"-"`
}

func (m *InvitesStatistics) Reset()         { *m = InvitesStatistics{} }
func (m *InvitesStatistics) String() string { return proto.CompactTextString(m) }
func (*InvitesStatistics) ProtoMessage()    {}
func (*InvitesStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2965078476053c3, []int{5}
}
func (m *InvitesStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvitesStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvitesStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvitesStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvitesStatistics.Merge(m, src)
}
func (m *InvitesStatistics) XXX_Size() int {
	return m.Size()
}
func (m *InvitesStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_InvitesStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_InvitesStatistics proto.InternalMessageInfo

func (m *InvitesStatistics) GetInvitesStatisticsKey() string {
	if m != nil {
		return m.InvitesStatisticsKey
	}
	return ""
}

func (m *InvitesStatistics) GetInviteRewardStatistics() GenesisInviteRewardStatistics {
	if m != nil {
		return m.InviteRewardStatistics
	}
	return GenesisInviteRewardStatistics{}
}


type GenesisInviteRewardStatistics struct {
	
	InviteRewardSpace string `protobuf:"bytes,1,opt,name=invite_reward_space,json=inviteRewardSpace,proto3" json:"invite_reward_space,omitempty"`
	
	InviteRewardCounts int64 `protobuf:"varint,2,opt,name=invite_reward_counts,json=inviteRewardCounts,proto3" json:"invite_reward_counts,omitempty"`
	
	ExpansionRewardSpace string `protobuf:"bytes,3,opt,name=expansion_reward_space,json=expansionRewardSpace,proto3" json:"expansion_reward_space,omitempty"`
	
	ExpansionRewardCounts int64    `protobuf:"varint,4,opt,name=expansion_reward_counts,json=expansionRewardCounts,proto3" json:"expansion_reward_counts,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GenesisInviteRewardStatistics) Reset()         { *m = GenesisInviteRewardStatistics{} }
func (m *GenesisInviteRewardStatistics) String() string { return proto.CompactTextString(m) }
func (*GenesisInviteRewardStatistics) ProtoMessage()    {}
func (*GenesisInviteRewardStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2965078476053c3, []int{6}
}
func (m *GenesisInviteRewardStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisInviteRewardStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisInviteRewardStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisInviteRewardStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisInviteRewardStatistics.Merge(m, src)
}
func (m *GenesisInviteRewardStatistics) XXX_Size() int {
	return m.Size()
}
func (m *GenesisInviteRewardStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisInviteRewardStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisInviteRewardStatistics proto.InternalMessageInfo

func (m *GenesisInviteRewardStatistics) GetInviteRewardSpace() string {
	if m != nil {
		return m.InviteRewardSpace
	}
	return ""
}

func (m *GenesisInviteRewardStatistics) GetInviteRewardCounts() int64 {
	if m != nil {
		return m.InviteRewardCounts
	}
	return 0
}

func (m *GenesisInviteRewardStatistics) GetExpansionRewardSpace() string {
	if m != nil {
		return m.ExpansionRewardSpace
	}
	return ""
}

func (m *GenesisInviteRewardStatistics) GetExpansionRewardCounts() int64 {
	if m != nil {
		return m.ExpansionRewardCounts
	}
	return 0
}

func init() {
	proto.RegisterType((*InviteRelation)(nil), "copyright.v1beta1.InviteRelation")
	proto.RegisterType((*InviteRecords)(nil), "copyright.v1beta1.InviteRecords")
	proto.RegisterType((*AccountInviteRecord)(nil), "copyright.v1beta1.AccountInviteRecord")
	proto.RegisterType((*InviteReward)(nil), "copyright.v1beta1.InviteReward")
	proto.RegisterType((*InviteSettlement)(nil), "copyright.v1beta1.InviteSettlement")
	proto.RegisterType((*InvitesStatistics)(nil), "copyright.v1beta1.InvitesStatistics")
	proto.RegisterType((*GenesisInviteRewardStatistics)(nil), "copyright.v1beta1.GenesisInviteRewardStatistics")
}

func init() { proto.RegisterFile("invite.proto", fileDescriptor_f2965078476053c3) }

var fileDescriptor_f2965078476053c3 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6e, 0x13, 0x31,
	0x14, 0xc6, 0x49, 0x01, 0xf1, 0xd2, 0x96, 0x8e, 0x93, 0x96, 0x11, 0x12, 0x49, 0x35, 0x08, 0x54,
	0xb1, 0x98, 0xb4, 0x05, 0xb1, 0x6f, 0x59, 0x20, 0xc4, 0x2e, 0x41, 0x2c, 0xd8, 0x04, 0x77, 0x62,
	0x86, 0x27, 0x9a, 0xf1, 0x68, 0x6c, 0x4a, 0x72, 0x0d, 0xae, 0xc0, 0x31, 0xb8, 0x40, 0x97, 0x9c,
	0x00, 0xa1, 0x5c, 0x80, 0x2b, 0x20, 0xff, 0xc4, 0x78, 0x92, 0x34, 0xbb, 0xf8, 0x7b, 0xdf, 0xe7,
	0xef, 0xbd, 0xcf, 0x2f, 0x03, 0xdb, 0x58, 0x5c, 0xa1, 0xe2, 0x69, 0x59, 0x09, 0x25, 0x68, 0x94,
	0x89, 0x72, 0x56, 0x61, 0xfe, 0x59, 0xa5, 0x57, 0x27, 0x17, 0x5c, 0xb1, 0x93, 0x87, 0x9d, 0x5c,
	0xe4, 0xc2, 0x54, 0xfb, 0xfa, 0x97, 0x25, 0x26, 0x39, 0xec, 0xbe, 0x31, 0xc2, 0x01, 0xbf, 0x64,
	0x0a, 0x45, 0x41, 0x53, 0x68, 0xdb, 0xab, 0x46, 0x95, 0x83, 0x46, 0x5f, 0xf8, 0x2c, 0x26, 0x87,
	0xe4, 0xe8, 0xde, 0x20, 0xc2, 0x1a, 0xf9, 0x2d, 0x9f, 0xd1, 0x27, 0xb0, 0xeb, 0xf8, 0x6c, 0x3c,
	0xae, 0xb8, 0x94, 0x71, 0xc3, 0x50, 0x77, 0x2c, 0x7a, 0x66, 0xc1, 0xe4, 0x07, 0x81, 0x9d, 0x85,
	0x53, 0x26, 0xaa, 0xb1, 0xa4, 0xc7, 0xd0, 0xf1, 0x46, 0x1a, 0xc1, 0x22, 0x0f, 0x9c, 0x28, 0x06,
	0x64, 0x2c, 0x72, 0x6d, 0xf5, 0x11, 0xf6, 0x59, 0x96, 0x89, 0xaf, 0x85, 0x1a, 0xd5, 0x94, 0x71,
	0xe3, 0xb0, 0x79, 0xd4, 0x3a, 0x7d, 0x9a, 0xae, 0x4c, 0x9d, 0x9e, 0x59, 0x7e, 0xe8, 0x7c, 0xbe,
	0x75, 0xfd, 0xbb, 0x77, 0x6b, 0xd0, 0x66, 0xab, 0xa5, 0xe4, 0x13, 0xb4, 0xd7, 0x28, 0x68, 0x0c,
	0x77, 0x17, 0xc3, 0xd9, 0xee, 0x16, 0x47, 0xda, 0x83, 0x96, 0x6b, 0x45, 0xe1, 0x84, 0x9b, 0xd1,
	0x9b, 0x03, 0xb0, 0xd0, 0x3b, 0x9c, 0x70, 0xda, 0x81, 0xdb, 0xb2, 0x64, 0x19, 0x8f, 0x9b, 0x46,
	0x68, 0x0f, 0xc9, 0x77, 0x02, 0xdb, 0x0b, 0x87, 0x6f, 0xac, 0x1a, 0xd3, 0x67, 0x10, 0xf9, 0x91,
	0x34, 0x10, 0x24, 0x71, 0x1f, 0x03, 0xa2, 0x8e, 0xe1, 0xbd, 0xe7, 0x4a, 0xae, 0xd4, 0x25, 0x9f,
	0xf0, 0x42, 0x19, 0xe7, 0xd6, 0xe9, 0xe3, 0x35, 0x11, 0x58, 0x9f, 0xa1, 0xa7, 0xba, 0xf9, 0xf7,
	0x70, 0x09, 0x4f, 0xa6, 0xb0, 0xb7, 0xcc, 0xa5, 0x2f, 0xe0, 0x80, 0x4f, 0x4b, 0x56, 0x48, 0xbd,
	0x07, 0xae, 0x35, 0x3b, 0x8f, 0x6d, 0xae, 0xe3, 0xab, 0xb6, 0xbf, 0xa1, 0xae, 0xd5, 0x76, 0x28,
	0x90, 0x34, 0xea, 0x3b, 0xe4, 0xf9, 0xc9, 0x4f, 0x02, 0x91, 0xb5, 0x96, 0x43, 0xc5, 0x14, 0x4a,
	0x85, 0x99, 0xd4, 0xde, 0x96, 0x2a, 0x47, 0xd2, 0xa3, 0x41, 0x30, 0x6e, 0x7d, 0x02, 0x89, 0x4e,
	0xa7, 0x84, 0x78, 0xc9, 0xdb, 0x97, 0x5d, 0x48, 0xc7, 0x6b, 0x42, 0x7a, 0xcd, 0x0b, 0x2e, 0x51,
	0x86, 0x6f, 0xf2, 0xff, 0x5a, 0x97, 0xd8, 0x01, 0xae, 0xad, 0x26, 0x7f, 0x09, 0x3c, 0xda, 0xa8,
	0xbf, 0x29, 0x0f, 0x72, 0x43, 0x1e, 0xb5, 0xbf, 0x86, 0xe1, 0x9b, 0x95, 0x94, 0x6e, 0xbd, 0x68,
	0x28, 0x78, 0x65, 0x2a, 0x1b, 0xde, 0xa9, 0xb9, 0xe1, 0x9d, 0x5e, 0xc2, 0x83, 0x15, 0x95, 0xb3,
	0xda, 0x32, 0x56, 0xfb, 0x4b, 0x32, 0xeb, 0x76, 0xde, 0xbb, 0x9e, 0x77, 0xc9, 0xaf, 0x79, 0x97,
	0xfc, 0x99, 0x77, 0xc9, 0x87, 0x68, 0xda, 0xf7, 0x81, 0xf6, 0xd5, 0xac, 0xe4, 0xf2, 0xe2, 0x8e,
	0xf9, 0xba, 0x3c, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x5d, 0x4f, 0xb5, 0x96, 0x04, 0x00,
	0x00,
}

func (m *InviteRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteRelation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteRelation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InviteAddress) > 0 {
		i -= len(m.InviteAddress)
		copy(dAtA[i:], m.InviteAddress)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.InviteAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InviteRelationKey) > 0 {
		i -= len(m.InviteRelationKey)
		copy(dAtA[i:], m.InviteRelationKey)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.InviteRelationKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AccountInviteRecord) > 0 {
		for iNdEx := len(m.AccountInviteRecord) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountInviteRecord[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInvite(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InviteRecordingKey) > 0 {
		i -= len(m.InviteRecordingKey)
		copy(dAtA[i:], m.InviteRecordingKey)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.InviteRecordingKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountInviteRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountInviteRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountInviteRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Space) > 0 {
		i -= len(m.Space)
		copy(dAtA[i:], m.Space)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.Space)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InviteTime != 0 {
		i = encodeVarintInvite(dAtA, i, uint64(m.InviteTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.InviteSettlement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInvite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.InviteRewardKey) > 0 {
		i -= len(m.InviteRewardKey)
		copy(dAtA[i:], m.InviteRewardKey)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.InviteRewardKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InviteSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InviteSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InviteSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InviteRewardSpace) > 0 {
		i -= len(m.InviteRewardSpace)
		copy(dAtA[i:], m.InviteRewardSpace)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.InviteRewardSpace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpansionRewardSpace) > 0 {
		i -= len(m.ExpansionRewardSpace)
		copy(dAtA[i:], m.ExpansionRewardSpace)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.ExpansionRewardSpace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvitesStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitesStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvitesStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.InviteRewardStatistics.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintInvite(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.InvitesStatisticsKey) > 0 {
		i -= len(m.InvitesStatisticsKey)
		copy(dAtA[i:], m.InvitesStatisticsKey)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.InvitesStatisticsKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisInviteRewardStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisInviteRewardStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisInviteRewardStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpansionRewardCounts != 0 {
		i = encodeVarintInvite(dAtA, i, uint64(m.ExpansionRewardCounts))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ExpansionRewardSpace) > 0 {
		i -= len(m.ExpansionRewardSpace)
		copy(dAtA[i:], m.ExpansionRewardSpace)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.ExpansionRewardSpace)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InviteRewardCounts != 0 {
		i = encodeVarintInvite(dAtA, i, uint64(m.InviteRewardCounts))
		i--
		dAtA[i] = 0x10
	}
	if len(m.InviteRewardSpace) > 0 {
		i -= len(m.InviteRewardSpace)
		copy(dAtA[i:], m.InviteRewardSpace)
		i = encodeVarintInvite(dAtA, i, uint64(len(m.InviteRewardSpace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInvite(dAtA []byte, offset int, v uint64) int {
	offset -= sovInvite(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InviteRelation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InviteRelationKey)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	l = len(m.InviteAddress)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InviteRecordingKey)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	if len(m.AccountInviteRecord) > 0 {
		for _, e := range m.AccountInviteRecord {
			l = e.Size()
			n += 1 + l + sovInvite(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountInviteRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	if m.InviteTime != 0 {
		n += 1 + sovInvite(uint64(m.InviteTime))
	}
	l = len(m.Space)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InviteRewardKey)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	l = m.InviteSettlement.Size()
	n += 1 + l + sovInvite(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InviteSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExpansionRewardSpace)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	l = len(m.InviteRewardSpace)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvitesStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvitesStatisticsKey)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	l = m.InviteRewardStatistics.Size()
	n += 1 + l + sovInvite(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenesisInviteRewardStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InviteRewardSpace)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	if m.InviteRewardCounts != 0 {
		n += 1 + sovInvite(uint64(m.InviteRewardCounts))
	}
	l = len(m.ExpansionRewardSpace)
	if l > 0 {
		n += 1 + l + sovInvite(uint64(l))
	}
	if m.ExpansionRewardCounts != 0 {
		n += 1 + sovInvite(uint64(m.ExpansionRewardCounts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInvite(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInvite(x uint64) (n int) {
	return sovInvite(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InviteRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRelationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteRelationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRecordingKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteRecordingKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountInviteRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountInviteRecord = append(m.AccountInviteRecord, AccountInviteRecord{})
			if err := m.AccountInviteRecord[len(m.AccountInviteRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountInviteRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountInviteRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountInviteRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteTime", wireType)
			}
			m.InviteTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Space = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRewardKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteRewardKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteSettlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InviteSettlement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InviteSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InviteSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InviteSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpansionRewardSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpansionRewardSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRewardSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteRewardSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitesStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitesStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitesStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitesStatisticsKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitesStatisticsKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRewardStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InviteRewardStatistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisInviteRewardStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisInviteRewardStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisInviteRewardStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRewardSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteRewardSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteRewardCounts", wireType)
			}
			m.InviteRewardCounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteRewardCounts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpansionRewardSpace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvite
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvite
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpansionRewardSpace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpansionRewardCounts", wireType)
			}
			m.ExpansionRewardCounts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpansionRewardCounts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInvite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvite(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvite
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInvite
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInvite
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInvite
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInvite        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvite          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInvite = fmt.Errorf("proto: unexpected end of group")
)
